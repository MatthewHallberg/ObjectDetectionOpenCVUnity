<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEngine.UIElementsModule</name>
    </assembly>
    <member name="T:UnityEngine.UIElements.Align">
      <summary>
        <para>Defines the alignement behavior along an axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Align.Auto">
      <summary>
        <para>Let Flex decide.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Align.Center">
      <summary>
        <para>Items are centered on the axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Align.FlexEnd">
      <summary>
        <para>End margin of the item is placed at the end of the axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Align.FlexStart">
      <summary>
        <para>Start margin of the item is placed at the start of the axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Align.Stretch">
      <summary>
        <para>Default. stretch to fill the axis while respecting min/max values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.AttachToPanelEvent">
      <summary>
        <para>Event sent after an element is added to an element that is a descendent of a panel.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.AttachToPanelEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Background">
      <summary>
        <para>Describes a VisualElement background.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Background.texture">
      <summary>
        <para>Background image texture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Background.#ctor(UnityEngine.Texture2D)">
      <summary>
        <para>Creates from a Texture2D.</para>
      </summary>
      <param name="t"></param>
    </member>
    <member name="T:UnityEngine.UIElements.BaseField`1">
      <summary>
        <para>Abstract base class for controls.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseField_1.inputUssClassName">
      <summary>
        <para>USS class name of input elements in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BaseField_1.label">
      <summary>
        <para>The string representing the label that will appear beside the field.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseField_1.labelDraggerVariantUssClassName">
      <summary>
        <para>USS class name of labels in elements of this type, when there is a dragger attached on them.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BaseField_1.labelElement">
      <summary>
        <para>This is the Label object that appears beside the input for the field.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseField_1.labelUssClassName">
      <summary>
        <para>USS class name of labels in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseField_1.noLabelVariantUssClassName">
      <summary>
        <para>USS class name of elements of this type, when there is no label.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BaseField_1.rawValue">
      <summary>
        <para>The value of the element.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseField_1.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BaseField_1.value">
      <summary>
        <para>The value associated with the field.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.BaseField_1.SetValueWithoutNotify(TValueType)">
      <summary>
        <para>Allow to set a value without being notified of the change, if any.</para>
      </summary>
      <param name="newValue">New value to bbe set.</param>
    </member>
    <member name="T:UnityEngine.UIElements.BaseField`1.UxmlFactory">
      <summary>
        <para>Instantiates a BaseField using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.BaseField`1.UxmlTraits">
      <summary>
        <para>UxmlTraits for the BaseField.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.BaseField_1.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.BaseFieldTraits`2">
      <summary>
        <para>Traits for the BaseField.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.BaseFieldTraits_2.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initializes the trait of BaseField.</para>
      </summary>
      <param name="ve">The VisualElement to initialize.</param>
      <param name="bag">Bag of attributes.</param>
      <param name="cc">The creation context associated with these traits.</param>
    </member>
    <member name="T:UnityEngine.UIElements.BaseSlider`1">
      <summary>
        <para>This is a base class for the Slider fields.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BaseSlider_1.direction">
      <summary>
        <para>This is the actual property to contain the direction of the slider.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseSlider_1.draggerUssClassName">
      <summary>
        <para>USS class name of dragger elements in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BaseSlider_1.highValue">
      <summary>
        <para>This is the maximum value that the slider encodes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseSlider_1.horizontalVariantUssClassName">
      <summary>
        <para>USS class name of elements of this type, when they are displayed horizontally.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseSlider_1.inputUssClassName">
      <summary>
        <para>USS class name of input elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseSlider_1.labelUssClassName">
      <summary>
        <para>USS class name of labels in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BaseSlider_1.lowValue">
      <summary>
        <para>This is the minimum value that the slider encodes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BaseSlider_1.pageSize">
      <summary>
        <para>This is a generic page size used to change the value when clicking in the slider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BaseSlider_1.range">
      <summary>
        <para>This is the range from the minimum value to the maximum value of the slider.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseSlider_1.trackerUssClassName">
      <summary>
        <para>USS class name of tracker elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseSlider_1.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BaseSlider_1.value">
      <summary>
        <para>The actual value of the slider.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.BaseSlider_1.verticalVariantUssClassName">
      <summary>
        <para>USS class name of elements of this type, when they are displayed vertically.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.BaseSlider_1.AdjustDragElement(System.Single)">
      <summary>
        <para>Method used to adjust the dragelement. Mainly used in a scroller.</para>
      </summary>
      <param name="factor">The factor used to adjust the drag element, where a value &gt; 1 will make it invisible.</param>
    </member>
    <member name="T:UnityEngine.UIElements.BindableElement">
      <summary>
        <para>Element that can be bound to a property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BindableElement.binding">
      <summary>
        <para>Binding object that will be updated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.BindableElement.bindingPath">
      <summary>
        <para>Path of the target property to be bound.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.BindableElement.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.BindableElement.UxmlFactory">
      <summary>
        <para>Instantiates a BindableElement using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.BindableElement.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.BindableElement.UxmlTraits">
      <summary>
        <para>UxmlTraits for the BindableElement.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.BindableElement.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.BindableElement.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize EnumField properties using values from the attribute bag.</para>
      </summary>
      <param name="ve"></param>
      <param name="bag"></param>
      <param name="cc"></param>
    </member>
    <member name="T:UnityEngine.UIElements.BlurEvent">
      <summary>
        <para>Event sent immediately after an element has lost focus. This event trickles down, it does not bubble up, and it cannot be cancelled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.BlurEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Box">
      <summary>
        <para>Styled visual element to match the IMGUI Box Style.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Box.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Box.UxmlFactory">
      <summary>
        <para>Instantiates a Box using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Box.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Button">
      <summary>
        <para>A clickable button.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Button.clickable">
      <summary>
        <para>Clickable MouseManipulator for this Button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Button.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Button.#ctor">
      <summary>
        <para>Constructs a Button.</para>
      </summary>
      <param name="clickEvent">Action triggered when the button is clicked.</param>
    </member>
    <member name="M:UnityEngine.UIElements.Button.#ctor(System.Action)">
      <summary>
        <para>Constructs a Button.</para>
      </summary>
      <param name="clickEvent">Action triggered when the button is clicked.</param>
    </member>
    <member name="T:UnityEngine.UIElements.Button.UxmlFactory">
      <summary>
        <para>Instantiates a Button using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Button.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Button.UxmlTraits">
      <summary>
        <para>UxmlTraits for the Button.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Button.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.CallbackEventHandler">
      <summary>
        <para>Interface for classes capable of having callbacks to handle events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.CallbackEventHandler.HandleEvent(UnityEngine.UIElements.EventBase)">
      <summary>
        <para>Handle an event, most often by executing the callbacks associated with the event.</para>
      </summary>
      <param name="evt">The event to handle.</param>
    </member>
    <member name="M:UnityEngine.UIElements.CallbackEventHandler.HasBubbleUpHandlers">
      <summary>
        <para>Return true if event handlers for the event propagation BubbleUp phase have been attached on this object.</para>
      </summary>
      <returns>
        <para>True if object has event handlers for the BubbleUp phase.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.CallbackEventHandler.HasTrickleDownHandlers">
      <summary>
        <para>Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.</para>
      </summary>
      <returns>
        <para>True if object has event handlers for the TrickleDown phase.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.CallbackEventHandler.RegisterCallback(UnityEngine.UIElements.EventCallback`1&lt;TEventType&gt;,UnityEngine.UIElements.TrickleDown)">
      <summary>
        <para>Adds an event handler to the instance. If the event handler has already been registered for the same phase (either TrickleDown or BubbleUp) then this method has no effect.</para>
      </summary>
      <param name="callback">The event handler to add.</param>
      <param name="useTrickleDown">By default, this callback is called during the BubbleUp phase. Pass TrickleDown.TrickleDown to call this callback during the TrickleDown phase.</param>
      <param name="userArgs">Data to pass to the callback.</param>
    </member>
    <member name="M:UnityEngine.UIElements.CallbackEventHandler.RegisterCallback(UnityEngine.UIElements.EventCallback`2&lt;TEventType,TUserArgsType&gt;,TUserArgsType,UnityEngine.UIElements.TrickleDown)">
      <summary>
        <para>Adds an event handler to the instance. If the event handler has already been registered for the same phase (either TrickleDown or BubbleUp) then this method has no effect.</para>
      </summary>
      <param name="callback">The event handler to add.</param>
      <param name="useTrickleDown">By default, this callback is called during the BubbleUp phase. Pass TrickleDown.TrickleDown to call this callback during the TrickleDown phase.</param>
      <param name="userArgs">Data to pass to the callback.</param>
    </member>
    <member name="M:UnityEngine.UIElements.CallbackEventHandler.SendEvent(UnityEngine.UIElements.EventBase)">
      <summary>
        <para>Sends an event to the event handler.</para>
      </summary>
      <param name="e">The event to send.</param>
    </member>
    <member name="M:UnityEngine.UIElements.CallbackEventHandler.UnregisterCallback(UnityEngine.UIElements.EventCallback`1&lt;TEventType&gt;,UnityEngine.UIElements.TrickleDown)">
      <summary>
        <para>Remove callback from the instance.</para>
      </summary>
      <param name="callback">The callback to remove.</param>
      <param name="useTrickleDown">Set this parameter to true to remove the callback from the TrickleDown phase. Set this parameter to false to remove the callback from the BubbleUp phase.</param>
    </member>
    <member name="M:UnityEngine.UIElements.CallbackEventHandler.UnregisterCallback(UnityEngine.UIElements.EventCallback`2&lt;TEventType,TUserArgsType&gt;,UnityEngine.UIElements.TrickleDown)">
      <summary>
        <para>Remove callback from the instance.</para>
      </summary>
      <param name="callback">The callback to remove.</param>
      <param name="useTrickleDown">Set this parameter to true to remove the callback from the TrickleDown phase. Set this parameter to false to remove the callback from the BubbleUp phase.</param>
    </member>
    <member name="T:UnityEngine.UIElements.ChangeEvent`1">
      <summary>
        <para>Sends an event when a value in a field changes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ChangeEvent_1.newValue">
      <summary>
        <para>The new value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ChangeEvent_1.previousValue">
      <summary>
        <para>The value before the change occured.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ChangeEvent_1.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ChangeEvent_1.GetPooled(T,T)">
      <summary>
        <para>Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="previousValue">The previous value.</param>
      <param name="newValue">The new value.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.ChangeEvent_1.Init">
      <summary>
        <para>Sets the event to its initial state.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Clickable">
      <summary>
        <para>Manipulator that tracks Mouse events on an element and callbacks when the elements is clicked.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Clickable.active">
      <summary>
        <para>Set this to true when the manipulator is activated.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.Clickable.clicked(System.Action)">
      <summary>
        <para>Callback triggerred when the target element is clicked.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.UIElements.Clickable.clickedWithEventInfo(System.Action`1&lt;UnityEngine.UIElements.EventBase&gt;)">
      <summary>
        <para>Callback triggerred when the target element is clicked.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEngine.UIElements.Clickable.lastMousePosition">
      <summary>
        <para>Mouse position saved during the last mouse event on the target element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Clickable.#ctor(System.Action,System.Int64,System.Int64)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="handler"></param>
      <param name="delay"></param>
      <param name="interval"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Clickable.#ctor(System.Action`1&lt;UnityEngine.UIElements.EventBase&gt;)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="handler"></param>
      <param name="delay"></param>
      <param name="interval"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Clickable.#ctor(System.Action)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="handler"></param>
      <param name="delay"></param>
      <param name="interval"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Clickable.OnMouseDown(UnityEngine.UIElements.MouseDownEvent)">
      <summary>
        <para>Called when a MouseDownEvent was sent to the target element.</para>
      </summary>
      <param name="evt"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Clickable.OnMouseMove(UnityEngine.UIElements.MouseMoveEvent)">
      <summary>
        <para>Called when a MouseMoveEvent was sent to the target element.</para>
      </summary>
      <param name="evt"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Clickable.OnMouseUp(UnityEngine.UIElements.MouseUpEvent)">
      <summary>
        <para>Called when a MouseUpEvent was sent to the target element.</para>
      </summary>
      <param name="evt"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Clickable.RegisterCallbacksOnTarget">
      <summary>
        <para>Called to register mouse event callbacks on the target element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Clickable.UnregisterCallbacksFromTarget">
      <summary>
        <para>Called to unregister event callbacks from the target element.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.CommandEventBase`1">
      <summary>
        <para>Base class for command events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.CommandEventBase_1.commandName">
      <summary>
        <para>Name of the command.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.CommandEventBase_1.GetPooled(UnityEngine.Event)">
      <summary>
        <para>Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="commandName">The command name.</param>
      <param name="systemEvent">An IMGUI command event.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.CommandEventBase_1.GetPooled(System.String)">
      <summary>
        <para>Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="commandName">The command name.</param>
      <param name="systemEvent">An IMGUI command event.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.CommandEventBase_1.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.ContextClickEvent">
      <summary>
        <para>The event sent when clicking the right mouse button.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ContextClickEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.ContextType">
      <summary>
        <para>Describes in which context a VisualElement hierarchy is being ran.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ContextType.Editor">
      <summary>
        <para>Currently running in the Unity Editor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ContextType.Player">
      <summary>
        <para>Currently running in an Unity Player.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.ContextualMenuManager">
      <summary>
        <para>Use this class to display a contextual menu.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ContextualMenuManager.DisplayMenu(UnityEngine.UIElements.EventBase,UnityEngine.UIElements.IEventHandler)">
      <summary>
        <para>Displays the contextual menu.</para>
      </summary>
      <param name="triggerEvent">The event that triggered the display of the menu.</param>
      <param name="target">The element for which the menu is displayed.</param>
    </member>
    <member name="M:UnityEngine.UIElements.ContextualMenuManager.DisplayMenuIfEventMatches(UnityEngine.UIElements.EventBase,UnityEngine.UIElements.IEventHandler)">
      <summary>
        <para>Checks if the event triggers the display of the contextual menu. This method also displays the menu.</para>
      </summary>
      <param name="eventHandler">The element for which the menu is displayed.</param>
      <param name="evt">The event to inspect.</param>
    </member>
    <member name="T:UnityEngine.UIElements.ContextualMenuManipulator">
      <summary>
        <para>Manipulator that displays a contextual menu when the user clicks the right mouse button or presses the menu key on the keyboard.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ContextualMenuManipulator.#ctor(System.Action`1&lt;UnityEngine.UIElements.ContextualMenuPopulateEvent&gt;)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="menuBuilder"></param>
    </member>
    <member name="M:UnityEngine.UIElements.ContextualMenuManipulator.RegisterCallbacksOnTarget">
      <summary>
        <para>Register the event callbacks on the manipulator target.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ContextualMenuManipulator.UnregisterCallbacksFromTarget">
      <summary>
        <para>Unregister the event callbacks from the manipulator target.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.ContextualMenuPopulateEvent">
      <summary>
        <para>The event sent when a contextual menu requires menu items.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ContextualMenuPopulateEvent.menu">
      <summary>
        <para>The menu to populate.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ContextualMenuPopulateEvent.triggerEvent">
      <summary>
        <para>The event that triggered the ContextualMenuPopulateEvent.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ContextualMenuPopulateEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ContextualMenuPopulateEvent.GetPooled">
      <summary>
        <para>Retrieves an event from the event pool. Use this method to retrieve a mouse event and initialize the event, instead of creating a new mouse event. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="triggerEvent">The event that triggered the display of the contextual menu.</param>
      <param name="menu">The menu to populate.</param>
      <param name="target">The element that triggered the display of the contextual menu.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.ContextualMenuPopulateEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.CreationContext">
      <summary>
        <para>This class is used during UXML template instantiation.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.CreationContext.op_Equal(UnityEngine.UIElements.CreationContext,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Compare two CreationContext objects and return true if they are equal.</para>
      </summary>
      <param name="context1">The first object.</param>
      <param name="context2">The second object.</param>
    </member>
    <member name="?:UnityEngine.UIElements.CreationContext.op_NotEqual(UnityEngine.UIElements.CreationContext,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Compare two CreationContext objects and return true if they are not equal.</para>
      </summary>
      <param name="context2">The first object.</param>
      <param name="context1">The second object.</param>
    </member>
    <member name="T:UnityEngine.UIElements.Cursor">
      <summary>
        <para>Script interface for VisualElement cursor style property IStyle.cursor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Cursor.hotspot">
      <summary>
        <para>The offset from the top left of the texture to use as the target point (must be within the bounds of the cursor).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Cursor.texture">
      <summary>
        <para>The texture to use for the cursor style. To use a texture as a cursor, import the texture with "Read/Write enabled" in the texture importer (or using the "Cursor" defaults).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.CustomStyleProperty`1">
      <summary>
        <para>Define a custom style property for an element to be retrieved with CustomStyleResolvedEvent.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.CustomStyleProperty_1.name">
      <summary>
        <para>Name of the custom property.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.CustomStyleProperty_1.#ctor(System.String)">
      <summary>
        <para>Creates custom property from a string.</para>
      </summary>
      <param name="propertyName">Name of the property. Must start with a -- prefix.</param>
    </member>
    <member name="T:UnityEngine.UIElements.CustomStyleResolvedEvent">
      <summary>
        <para>Event sent after the custom style properties of a VisualElement have been resolved.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.CustomStyleResolvedEvent.customStyle">
      <summary>
        <para>Returns the custom style properties accessor for the targeted VisualElement.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.DetachFromPanelEvent">
      <summary>
        <para>Event sent just before an element is detach from its parent, if the parent is the descendant of a panel.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DetachFromPanelEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.DisplayStyle">
      <summary>
        <para>Defines how an element is displayed in the layout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.DisplayStyle.Flex">
      <summary>
        <para>The element displays normally.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.DisplayStyle.None">
      <summary>
        <para>The element is not visible and absent from the layout.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.DragAndDropEventBase`1">
      <summary>
        <para>Base class for drag and drop events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.DragEnterEvent">
      <summary>
        <para>Use the DragEnterEvent class to manage events that occur when dragging enters an element or one of its descendants. The DragEnterEvent is cancellable, it does not trickle down, and it does not bubble up.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DragEnterEvent.#ctor">
      <summary>
        <para>Constructor. Avoid renewing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DragEnterEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.DragExitedEvent">
      <summary>
        <para>The event sent to a dragged element when the drag and drop process ends.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DragExitedEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DragExitedEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.DragLeaveEvent">
      <summary>
        <para>Use the DragLeaveEvent class to manage events sent when dragging leaves an element or one of its descendants. The DragLeaveEvent is cancellable, it does not trickle down, and it does not bubble up.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DragLeaveEvent.#ctor">
      <summary>
        <para>Constructor. Avoid renewing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DragLeaveEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.DragPerformEvent">
      <summary>
        <para>The event sent to an element when another element is dragged and dropped on the element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DragPerformEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.DragUpdatedEvent">
      <summary>
        <para>The event sent when the element being dragged enters a possible drop target.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DragUpdatedEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.DropdownMenu">
      <summary>
        <para>A drop-down menu.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenu.AppendAction(System.String,System.Action`1&lt;UnityEngine.UIElements.DropdownMenuAction&gt;,System.Func`2&lt;UnityEngine.UIElements.DropdownMenuAction,UnityEngine.UIElements.DropdownMenuAction/Status&gt;,System.Object)">
      <summary>
        <para>Add an item that will execute an action in the drop-down menu. The item is added at the end of the current item list.</para>
      </summary>
      <param name="actionName">Name of the item. This name will be displayed in the drop-down menu.</param>
      <param name="action">Callback to execute when the user selects this item in the menu.</param>
      <param name="actionStatusCallback">Callback to execute to determine the status of the item.</param>
      <param name="userData">An object that will be stored in the userData property of the DropdownMenuAction item.</param>
      <param name="status">The status of the item.</param>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenu.AppendAction(System.String,System.Action`1&lt;UnityEngine.UIElements.DropdownMenuAction&gt;,UnityEngine.UIElements.DropdownMenuAction/Status)">
      <summary>
        <para>Add an item that will execute an action in the drop-down menu. The item is added at the end of the current item list.</para>
      </summary>
      <param name="actionName">Name of the item. This name will be displayed in the drop-down menu.</param>
      <param name="action">Callback to execute when the user selects this item in the menu.</param>
      <param name="actionStatusCallback">Callback to execute to determine the status of the item.</param>
      <param name="userData">An object that will be stored in the userData property of the DropdownMenuAction item.</param>
      <param name="status">The status of the item.</param>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenu.AppendSeparator()">
      <summary>
        <para>Add a separator line in the menu. The separator is added at the end of the current item list.</para>
      </summary>
      <param name="subMenuPath">The submenu path where the separator will be added. Path components are delimited by forward slashes ('/').</param>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenu.AppendSeparator(System.String)">
      <summary>
        <para>Add a separator line in the menu. The separator is added at the end of the current item list.</para>
      </summary>
      <param name="subMenuPath">The submenu path where the separator will be added. Path components are delimited by forward slashes ('/').</param>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenu.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenu.InsertAction(System.Int32,System.String,System.Action`1&lt;UnityEngine.UIElements.DropdownMenuAction&gt;,UnityEngine.UIElements.DropdownMenuAction/Status)">
      <summary>
        <para>Add an item that will execute an action in the drop-down menu. The item is added at the end of the specified index in the list.</para>
      </summary>
      <param name="actionName">Name of the item. This name will be displayed in the drop-down menu.</param>
      <param name="action">Callback to execute when the user selects this item in the menu.</param>
      <param name="actionStatusCallback">Callback to execute to determine the status of the item.</param>
      <param name="atIndex">Index where the item should be inserted.</param>
      <param name="userData">An object that will be stored in the userData property of the DropdownMenuAction item. This object is accessible through the action callback.</param>
      <param name="status">The status of the item.</param>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenu.InsertAction(System.Int32,System.String,System.Action`1&lt;UnityEngine.UIElements.DropdownMenuAction&gt;,System.Func`2&lt;UnityEngine.UIElements.DropdownMenuAction,UnityEngine.UIElements.DropdownMenuAction/Status&gt;,System.Object)">
      <summary>
        <para>Add an item that will execute an action in the drop-down menu. The item is added at the end of the specified index in the list.</para>
      </summary>
      <param name="actionName">Name of the item. This name will be displayed in the drop-down menu.</param>
      <param name="action">Callback to execute when the user selects this item in the menu.</param>
      <param name="actionStatusCallback">Callback to execute to determine the status of the item.</param>
      <param name="atIndex">Index where the item should be inserted.</param>
      <param name="userData">An object that will be stored in the userData property of the DropdownMenuAction item. This object is accessible through the action callback.</param>
      <param name="status">The status of the item.</param>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenu.InsertSeparator(System.String,System.Int32)">
      <summary>
        <para>Add a separator line in the menu. The separator is added at the end of the specified index in the list.</para>
      </summary>
      <param name="atIndex">Index where the separator should be inserted.</param>
      <param name="subMenuPath">The submenu path where the separator is added. Path components are delimited by forward slashes ('/').</param>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenu.MenuItems">
      <summary>
        <para>Get the list of menu items.</para>
      </summary>
      <returns>
        <para>The list of items in the menu.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenu.PrepareForDisplay(UnityEngine.UIElements.EventBase)">
      <summary>
        <para>Update the status of all items by calling their status callback and remove the separators in excess. This is called just before displaying the menu.</para>
      </summary>
      <param name="e"></param>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenu.RemoveItemAt(System.Int32)">
      <summary>
        <para>Remove the menu item at index.</para>
      </summary>
      <param name="index">The index of the item to remove.</param>
    </member>
    <member name="T:UnityEngine.UIElements.DropdownMenuAction">
      <summary>
        <para>A menu action item.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.DropdownMenuAction.eventInfo">
      <summary>
        <para>Provides information on the event that triggered the drop-down menu.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.DropdownMenuAction.name">
      <summary>
        <para>The name of the item. The name can be prefixed by its submenu path. Path components are delimited by forward slashes ('/').</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.DropdownMenuAction.status">
      <summary>
        <para>The status of the item.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.DropdownMenuAction.userData">
      <summary>
        <para>The userData object stored by the constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenuAction.AlwaysDisabled(UnityEngine.UIElements.DropdownMenuAction)">
      <summary>
        <para>Status callback that always returns Status.Disabled.</para>
      </summary>
      <param name="a">Unused parameter.</param>
      <returns>
        <para>Always return Status.Disabled.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenuAction.AlwaysEnabled(UnityEngine.UIElements.DropdownMenuAction)">
      <summary>
        <para>Status callback that always returns Status.Enabled.</para>
      </summary>
      <param name="a">Unused parameter.</param>
      <returns>
        <para>Always return Status.Enabled.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenuAction.#ctor(System.String,System.Action`1&lt;UnityEngine.UIElements.DropdownMenuAction&gt;,System.Func`2&lt;UnityEngine.UIElements.DropdownMenuAction,UnityEngine.UIElements.DropdownMenuAction/Status&gt;,System.Object)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="actionName">The path and name of the menu item. Use the path, delimited by forward slashes ('/'), to place the menu item within a submenu.</param>
      <param name="actionCallback">Action to be executed when the menu item is selected.</param>
      <param name="actionStatusCallback">Function called to determine if the menu item is enabled.</param>
      <param name="userData">An object that will be stored in the userData property.</param>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenuAction.Execute">
      <summary>
        <para>Execute the callback associated with this item.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.DropdownMenuAction.Status">
      <summary>
        <para>Status of the menu item. The values of this enumeration should be used as flags.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.DropdownMenuAction.Status.Checked">
      <summary>
        <para>The item is displayed with a checkmark.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.DropdownMenuAction.Status.Disabled">
      <summary>
        <para>The item is disabled and is not be selectable by the user.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.DropdownMenuAction.Status.Hidden">
      <summary>
        <para>The item is not displayed. This flag can be used with other flags.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.DropdownMenuAction.Status.None">
      <summary>
        <para>The item is not displayed. This is the default value and represents the absence of flags.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.DropdownMenuAction.Status.Normal">
      <summary>
        <para>The item is displayed normally.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenuAction.UpdateActionStatus(UnityEngine.UIElements.DropdownMenuEventInfo)">
      <summary>
        <para>Update the status flag of this item by calling the item status callback.</para>
      </summary>
      <param name="eventInfo">Information about the event that triggered the display of the drop-down menu, such as the mouse position or the key pressed.</param>
    </member>
    <member name="T:UnityEngine.UIElements.DropdownMenuEventInfo">
      <summary>
        <para>This class provides information about the event that triggered displaying the drop-down menu.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.DropdownMenuEventInfo.localMousePosition">
      <summary>
        <para>If the triggering event was a mouse event, this property is the mouse position. The position is expressed using the coordinate system of the element that received the mouse event. Otherwise this property is zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.DropdownMenuEventInfo.modifiers">
      <summary>
        <para>If modifier keys (Alt, Control, Shift, Windows/Command) were pressed to trigger the display of the dropdown menu, this property lists the modifier keys.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.DropdownMenuEventInfo.mousePosition">
      <summary>
        <para>If the triggering event was a mouse event, this property is the mouse position expressed using the global coordinate system. Otherwise this property is zero.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenuEventInfo.#ctor(UnityEngine.UIElements.EventBase)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="e"></param>
    </member>
    <member name="T:UnityEngine.UIElements.DropdownMenuItem">
      <summary>
        <para>An item in a drop-down menu.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.DropdownMenuSeparator">
      <summary>
        <para>A separator menu item.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.DropdownMenuSeparator.subMenuPath">
      <summary>
        <para>The submenu path where the separator will be added. Path components are delimited by forward slashes ('/').</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.DropdownMenuSeparator.#ctor(System.String)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="subMenuPath">The path for the submenu. Path components are delimited by forward slashes ('/').</param>
    </member>
    <member name="T:UnityEngine.UIElements.EventBase">
      <summary>
        <para>The base class for all UIElements events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.bubbles">
      <summary>
        <para>Whether this event type bubbles up in the event propagation path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.currentTarget">
      <summary>
        <para>The current target of the event. The current target is the element in the propagation path for which event handlers are currently being executed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.dispatch">
      <summary>
        <para>Whether the event is being dispatched to a visual element. An event cannot be redispatched while it being dispatched. If you need to recursively dispatch an event, it is recommended that you use a copy of the event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.eventTypeId">
      <summary>
        <para>Retrieves the type id for this event instance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.imguiEvent">
      <summary>
        <para>The IMGUIEvent at the source of this event. The source can be null since not all events are generated by IMGUI.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.isDefaultPrevented">
      <summary>
        <para>Return true if the default actions should not be executed for this event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.isImmediatePropagationStopped">
      <summary>
        <para>Whether StopImmediatePropagation() was called for this event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.isPropagationStopped">
      <summary>
        <para>Whether StopPropagation() was called for this event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.originalMousePosition">
      <summary>
        <para>The original mouse position of the IMGUI event, before it is transformed to the current target local coordinates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.pooled">
      <summary>
        <para>Whether the event is allocated from a pool of events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.propagationPhase">
      <summary>
        <para>The current propagation phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.target">
      <summary>
        <para>The target visual element that received this event. Unlike currentTarget, this target does not change when the event is sent to other elements along the propagation path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.timestamp">
      <summary>
        <para>The time when the event was created.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase.tricklesDown">
      <summary>
        <para>Whether this event is sent down the event propagation path during the TrickleDown phase.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.EventBase.Dispose">
      <summary>
        <para>Implementation of IDisposable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.EventBase.Init">
      <summary>
        <para>Resets all event members to their initial values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.EventBase.PreventDefault">
      <summary>
        <para>Whether the default actions are prevented from being executed for this event.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.EventBase.RegisterEventType">
      <summary>
        <para>Registers an event class to the event type system.</para>
      </summary>
      <returns>
        <para>The type ID.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.EventBase.StopImmediatePropagation">
      <summary>
        <para>Immediately stops the propagation of the event. The event is not sent to other elements along the propagation path. This method prevents other event handlers from executing on the current target.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.EventBase.StopPropagation">
      <summary>
        <para>Stops propagating this event. The event is not sent to other elements along the propagation path. This method does not prevent other event handlers from executing on the current target.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.EventBase`1">
      <summary>
        <para>Generic base class for events, implementing event pooling and automatic registration to the event type system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.EventBase_1.eventTypeId">
      <summary>
        <para>Retrieves the type id for this event instance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.EventBase_1.Dispose">
      <summary>
        <para>Implementation of IDispose.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.EventBase_1.GetPooled">
      <summary>
        <para>Gets an event from the event pool. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.EventBase_1.Init">
      <summary>
        <para>Resets all event members to their initial values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.EventBase_1.TypeId">
      <summary>
        <para>Gets the type id for the event class.</para>
      </summary>
      <returns>
        <para>The event class type id.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.EventDispatcher">
      <summary>
        <para>Dispatches events to a IPanel.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.EventDispatcherGate">
      <summary>
        <para>Gates control when the dispatcher processes events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.EventDispatcherGate.#ctor(UnityEngine.UIElements.EventDispatcher)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="d">The dispatcher controlled by this gate.</param>
    </member>
    <member name="M:UnityEngine.UIElements.EventDispatcherGate.Dispose">
      <summary>
        <para>Implementation of IDisposable.Dispose. Opens the gate. If all gates are open, events in the queue are processed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.ExecuteCommandEvent">
      <summary>
        <para>The event sent when an element should execute a command.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ExecuteCommandEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.FlexDirection">
      <summary>
        <para>Defines the main-axis of the flex layout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.FlexDirection.Column">
      <summary>
        <para>Top to Bottom.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.FlexDirection.ColumnReverse">
      <summary>
        <para>Bottom to Top.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.FlexDirection.Row">
      <summary>
        <para>Left to Right.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.FlexDirection.RowReverse">
      <summary>
        <para>Right to Left.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Focusable">
      <summary>
        <para>Base class for objects that can get the focus.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Focusable.canGrabFocus">
      <summary>
        <para>Return true if the element can be focused.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Focusable.delegatesFocus">
      <summary>
        <para>Whether the element should delegate the focus to its children.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Focusable.focusable">
      <summary>
        <para>True if the element can be focused.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Focusable.focusController">
      <summary>
        <para>Return the focus controller for this element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Focusable.tabIndex">
      <summary>
        <para>An integer used to sort focusables in the focus ring. Must be greater than or equal to zero.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Focusable.Blur">
      <summary>
        <para>Tell the element to release the focus.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Focusable.Focus">
      <summary>
        <para>Attempt to give the focus to this element.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.FocusChangeDirection">
      <summary>
        <para>Base class for defining in which direction the focus moves in a focus ring.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.FocusChangeDirection.lastValue">
      <summary>
        <para>Last value for the direction defined by this class.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.FocusChangeDirection.none">
      <summary>
        <para>The null direction. This is usually used when the focus stays on the same element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.FocusChangeDirection.unspecified">
      <summary>
        <para>Focus came from an unspecified direction, for example after a mouse down.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.FocusChangeDirection.implop_int(FocusChangeDirection)(UnityEngine.UIElements.FocusChangeDirection)">
      <summary>
        <para>The underlying integer value for this direction.</para>
      </summary>
      <param name="fcd"></param>
    </member>
    <member name="T:UnityEngine.UIElements.FocusController">
      <summary>
        <para>Class in charge of managing the focus inside a Panel.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.FocusController.focusedElement">
      <summary>
        <para>The currently focused element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.FocusController.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.FocusEvent">
      <summary>
        <para>Event sent immediately after an element has gained focus. This event trickles down, it does not bubble up, and it cannot be cancelled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.FocusEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.FocusEventBase`1">
      <summary>
        <para>Base class for focus related events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.FocusEventBase_1.direction">
      <summary>
        <para>Direction of the focus change.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.FocusEventBase_1.focusController">
      <summary>
        <para>The focus controller that emitted the event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.FocusEventBase_1.relatedTarget">
      <summary>
        <para>For FocusOut and Blur events, contains the element that gains the focus. For FocusIn and Focus events, contains the element that loses the focus.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.FocusEventBase_1.GetPooled">
      <summary>
        <para>Gets an event from the event pool and initializes the event with the given values. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="target">The event target.</param>
      <param name="relatedTarget">The related target.</param>
      <param name="direction">The direction of the focus change.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.FocusEventBase_1.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.FocusInEvent">
      <summary>
        <para>Event sent immediately before an element gains focus. This event trickles down and bubbles up. This event cannot be cancelled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.FocusInEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.FocusInEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.FocusOutEvent">
      <summary>
        <para>Event sent immediately before an element loses focus. This event trickles down and bubbles up. This event cannot be cancelled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.FocusOutEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.FocusOutEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Foldout">
      <summary>
        <para>Collapsable section of UI.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Foldout.contentUssClassName">
      <summary>
        <para>USS class name of content element in a Foldout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Foldout.toggleUssClassName">
      <summary>
        <para>USS class name of toggle elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Foldout.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Foldout.value">
      <summary>
        <para>Contains the collapse state. True if the Foldout is open and the contents are visible. False if it's collapsed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Foldout.UxmlFactory">
      <summary>
        <para>Instantiates a Foldout using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Foldout.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.GeometryChangedEvent">
      <summary>
        <para>Event sent after layout calculations, when the position or the dimension of an element changes. This event cannot be cancelled, it does not trickle down, and it does not bubble up.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.GeometryChangedEvent.newRect">
      <summary>
        <para>The new dimensions of the element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.GeometryChangedEvent.oldRect">
      <summary>
        <para>The old dimensions of the element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.GeometryChangedEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.GeometryChangedEvent.GetPooled(UnityEngine.Rect,UnityEngine.Rect)">
      <summary>
        <para>Gets an event from the event pool and initializes the event with the specified values. Use this method instead of instancing new events. Use Dispose() to release events back to the event pool.</para>
      </summary>
      <param name="oldRect">The old dimensions of the element.</param>
      <param name="newRect">The new dimensions of the element.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.GeometryChangedEvent.Init">
      <summary>
        <para>Resets the event values to their initial values.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.IBindable">
      <summary>
        <para>Interface for all bindable fields.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IBindable.binding">
      <summary>
        <para>Binding object that will be updated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IBindable.bindingPath">
      <summary>
        <para>Path of the target property to be bound.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.IBinding">
      <summary>
        <para>Base interface for Binding objects.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IBinding.PreUpdate">
      <summary>
        <para>Called at regular intervals to synchronize bound properties to their IBindable counterparts. Called before the Update() method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IBinding.Release">
      <summary>
        <para>Disconnects the field from its bound property</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IBinding.Update">
      <summary>
        <para>Called at regular intervals to synchronize bound properties to their IBindable counterparts.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.IBindingExtensions">
      <summary>
        <para>Extensions methods to provide additional IBindable functionality.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IBindingExtensions.IsBound(UnityEngine.UIElements.IBindable)">
      <summary>
        <para>Checks if a IBindable is bound to a property.</para>
      </summary>
      <param name="control">This Bindable object.</param>
      <returns>
        <para>Returns true if this IBindable is bound to a property.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.UIElements.IChangeEvent">
      <summary>
        <para>Base interface for ChangeEvent.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.ICommandEvent">
      <summary>
        <para>Interface for Command events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ICommandEvent.commandName">
      <summary>
        <para>Name of the command.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.ICustomStyle">
      <summary>
        <para>This interface exposes methods to read custom style properties applied from USS files to visual elements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ICustomStyle.TryGetValue(UnityEngine.UIElements.CustomStyleProperty`1&lt;System.Single&gt;,System.Single&amp;)">
      <summary>
        <para>Gets the value associated with the specified CustomStyleProperty.</para>
      </summary>
      <param name="property"></param>
      <param name="value"></param>
      <returns>
        <para>True if the property is found, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.ICustomStyle.TryGetValue(UnityEngine.UIElements.CustomStyleProperty`1&lt;System.Int32&gt;,System.Int32&amp;)">
      <summary>
        <para>Gets the value associated with the specified CustomStyleProperty.</para>
      </summary>
      <param name="property"></param>
      <param name="value"></param>
      <returns>
        <para>True if the property is found, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.ICustomStyle.TryGetValue(UnityEngine.UIElements.CustomStyleProperty`1&lt;System.Boolean&gt;,System.Boolean&amp;)">
      <summary>
        <para>Gets the value associated with the specified CustomStyleProperty.</para>
      </summary>
      <param name="property"></param>
      <param name="value"></param>
      <returns>
        <para>True if the property is found, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.ICustomStyle.TryGetValue(UnityEngine.UIElements.CustomStyleProperty`1&lt;UnityEngine.Color&gt;,UnityEngine.Color&amp;)">
      <summary>
        <para>Gets the value associated with the specified CustomStyleProperty.</para>
      </summary>
      <param name="property"></param>
      <param name="value"></param>
      <returns>
        <para>True if the property is found, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.ICustomStyle.TryGetValue(UnityEngine.UIElements.CustomStyleProperty`1&lt;UnityEngine.Texture2D&gt;,UnityEngine.Texture2D&amp;)">
      <summary>
        <para>Gets the value associated with the specified CustomStyleProperty.</para>
      </summary>
      <param name="property"></param>
      <param name="value"></param>
      <returns>
        <para>True if the property is found, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.ICustomStyle.TryGetValue(UnityEngine.UIElements.CustomStyleProperty`1&lt;System.String&gt;,System.String&amp;)">
      <summary>
        <para>Gets the value associated with the specified CustomStyleProperty.</para>
      </summary>
      <param name="property"></param>
      <param name="value"></param>
      <returns>
        <para>True if the property is found, false if not.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.UIElements.IDragAndDropEvent">
      <summary>
        <para>Interface for drag and drop events.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.IEventHandler">
      <summary>
        <para>Interface for class capable of handling events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IEventHandler.HandleEvent(UnityEngine.UIElements.EventBase)">
      <summary>
        <para>Handle an event.</para>
      </summary>
      <param name="evt">The event to handle.</param>
    </member>
    <member name="M:UnityEngine.UIElements.IEventHandler.HasBubbleUpHandlers">
      <summary>
        <para>Return true if event handlers for the event propagation BubbleUp phase have been attached on this object.</para>
      </summary>
      <returns>
        <para>True if object has event handlers for the BubbleUp phase.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.IEventHandler.HasTrickleDownHandlers">
      <summary>
        <para>Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.</para>
      </summary>
      <returns>
        <para>Returns true if the object already has event handlers for the TrickleDown phase.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.IEventHandler.SendEvent(UnityEngine.UIElements.EventBase)">
      <summary>
        <para>Sends an event to the event handler.</para>
      </summary>
      <param name="e">The event to send.</param>
    </member>
    <member name="?:UnityEngine.UIElements.IFocusEvent">
      <summary>
        <para>Interface for focus events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IFocusEvent.direction">
      <summary>
        <para>Direction of the focus change.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IFocusEvent.relatedTarget">
      <summary>
        <para>Related target. See implementation for specific meaning.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.IFocusRing">
      <summary>
        <para>Interface for classes implementing focus rings.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IFocusRing.GetFocusChangeDirection(UnityEngine.UIElements.Focusable,UnityEngine.UIElements.EventBase)">
      <summary>
        <para>Get the direction of the focus change for the given event. For example, when the Tab key is pressed, focus should be given to the element to the right.</para>
      </summary>
      <param name="currentFocusable"></param>
      <param name="e"></param>
    </member>
    <member name="M:UnityEngine.UIElements.IFocusRing.GetNextFocusable(UnityEngine.UIElements.Focusable,UnityEngine.UIElements.FocusChangeDirection)">
      <summary>
        <para>Get the next element in the given direction.</para>
      </summary>
      <param name="currentFocusable"></param>
      <param name="direction"></param>
    </member>
    <member name="?:UnityEngine.UIElements.IKeyboardEvent">
      <summary>
        <para>Interface for keyboard events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IKeyboardEvent.actionKey">
      <summary>
        <para>Returns true if the platform specific action key is pressed. This key is Command on macOS and Control otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IKeyboardEvent.altKey">
      <summary>
        <para>Return true if the Alt key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IKeyboardEvent.character">
      <summary>
        <para>The character.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IKeyboardEvent.commandKey">
      <summary>
        <para>Return true if the Windows/Command key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IKeyboardEvent.ctrlKey">
      <summary>
        <para>Return true if the Control key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IKeyboardEvent.keyCode">
      <summary>
        <para>The key code.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IKeyboardEvent.modifiers">
      <summary>
        <para>Flag set holding the pressed modifier keys (Alt, Control, Shift, Windows/Command).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IKeyboardEvent.shiftKey">
      <summary>
        <para>Return true if the Shift key is pressed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Image">
      <summary>
        <para>A VisualElement representing a source texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Image.image">
      <summary>
        <para>The source texture of the Image element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Image.scaleMode">
      <summary>
        <para>ScaleMode used to display the Image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Image.sourceRect">
      <summary>
        <para>The source rectangle inside the texture relative to the top left corner.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Image.tintColor">
      <summary>
        <para>Tinting color for this Image.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Image.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Image.uv">
      <summary>
        <para>The base texture coordinates of the Image relative to the bottom left corner.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Image.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Image.UxmlFactory">
      <summary>
        <para>Instantiates an Image using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Image.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Image.UxmlTraits">
      <summary>
        <para>UxmlTraits for the Image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Image.UxmlTraits.uxmlChildElementsDescription">
      <summary>
        <para>Returns an empty enumerable, as images generally do not have children.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Image.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.IManipulator">
      <summary>
        <para>Interface for Manipulator objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IManipulator.target">
      <summary>
        <para>VisualElement being manipulated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.IMGUIContainer">
      <summary>
        <para>Element that draws IMGUI content.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMGUIContainer.contextType">
      <summary>
        <para>ContextType of this IMGUIContrainer. Currently only supports ContextType.Editor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMGUIContainer.onGUIHandler">
      <summary>
        <para>The function that is called to render and handle IMGUI events.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.IMGUIContainer.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IMGUIContainer.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="onGUIHandler">The function assigned to onGUIHandler.</param>
    </member>
    <member name="M:UnityEngine.UIElements.IMGUIContainer.#ctor(System.Action)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="onGUIHandler">The function assigned to onGUIHandler.</param>
    </member>
    <member name="M:UnityEngine.UIElements.IMGUIContainer.MarkDirtyLayout">
      <summary>
        <para>Marks layout as dirty to trigger a redraw.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.IMGUIContainer.UxmlFactory">
      <summary>
        <para>Instantiates an IMGUIContainer using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IMGUIContainer.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.IMGUIContainer.UxmlTraits">
      <summary>
        <para>UxmlTraits for the IMGUIContainer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMGUIContainer.UxmlTraits.uxmlChildElementsDescription">
      <summary>
        <para>Returns an empty enumerable, as IMGUIContainer cannot have VisualElement children.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IMGUIContainer.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.IMGUIEvent">
      <summary>
        <para>Class used to send a IMGUI event that has no equivalent UIElements event.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IMGUIEvent.#ctor">
      <summary>
        <para>Constructor. Use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IMGUIEvent.GetPooled(UnityEngine.Event)">
      <summary>
        <para>Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="systemEvent">The IMGUI event used to initialize the event.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.IMGUIEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.ImmediateModeElement">
      <summary>
        <para>VisualElement that can implement custom immediate mode rendering.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ImmediateModeElement.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ImmediateModeElement.ImmediateRepaint">
      <summary>
        <para>Invoked during the repaint phase.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ImmediateModeElement.ImmediateRepaint">
      <summary>
        <para>Invoked during the repaint phase.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.IMouseCaptureEvent">
      <summary>
        <para>Interface for mouse capture events.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.IMouseEvent">
      <summary>
        <para>Interface for mouse events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMouseEvent.actionKey">
      <summary>
        <para>Returns true if the platform specific action key is pressed. This key is Command on macOS and Control otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMouseEvent.altKey">
      <summary>
        <para>Return true if the Alt key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMouseEvent.button">
      <summary>
        <para>Integer representing the pressed mouse button: 0 is left, 1 is right, 2 is center.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMouseEvent.clickCount">
      <summary>
        <para>Number of clicks.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMouseEvent.commandKey">
      <summary>
        <para>Return true if the Windows/Command key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMouseEvent.ctrlKey">
      <summary>
        <para>Return true if the Control key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMouseEvent.localMousePosition">
      <summary>
        <para>The mouse position in the current target coordinate system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMouseEvent.modifiers">
      <summary>
        <para>Flag set holding the pressed modifier keys (Alt, Control, Shift, Windows/Command).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMouseEvent.mouseDelta">
      <summary>
        <para>Mouse position difference between the last mouse event and this one.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMouseEvent.mousePosition">
      <summary>
        <para>The mouse position in the panel coordinate system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IMouseEvent.shiftKey">
      <summary>
        <para>Return true if the Shift key is pressed.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.INotifyValueChanged_1">
      <summary>
        <para>Interface for controls that hold a value and can notify when it is changed by user input.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.INotifyValueChanged_1.value">
      <summary>
        <para>The Value held by the control.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.INotifyValueChanged_1.SetValueWithoutNotify(T)">
      <summary>
        <para>Set the value and, even if different, does not notify registers callbacks with a ChangeEvent&lt;T&gt;</para>
      </summary>
      <param name="newValue">The new value to be set.</param>
    </member>
    <member name="T:UnityEngine.UIElements.INotifyValueChangedExtensions">
      <summary>
        <para>INotifyValueChangedExtensions is a set of extension methods useful for objects implementing INotifyValueChanged.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.INotifyValueChangedExtensions.RegisterValueChangedCallback(UnityEngine.UIElements.INotifyValueChanged`1&lt;T&gt;,UnityEngine.UIElements.EventCallback`1&lt;UnityEngine.UIElements.ChangeEvent`1&lt;T&gt;&gt;)">
      <summary>
        <para>Registers this callback to receive ChangeEvent&lt;T&gt; when value is changed.</para>
      </summary>
      <param name="control"></param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEngine.UIElements.INotifyValueChangedExtensions.UnregisterValueChangedCallback(UnityEngine.UIElements.INotifyValueChanged`1&lt;T&gt;,UnityEngine.UIElements.EventCallback`1&lt;UnityEngine.UIElements.ChangeEvent`1&lt;T&gt;&gt;)">
      <summary>
        <para>Unregisters this callback from receiving ChangeEvent&lt;T&gt; when value is changed.</para>
      </summary>
      <param name="control"></param>
      <param name="callback"></param>
    </member>
    <member name="T:UnityEngine.UIElements.InputEvent">
      <summary>
        <para>Sends an event when text from a TextField changes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.InputEvent.newData">
      <summary>
        <para>The new text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.InputEvent.previousData">
      <summary>
        <para>The text before the change occured.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.InputEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.InputEvent.GetPooled(System.String,System.String)">
      <summary>
        <para>Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="newData">The new text.</param>
      <param name="previousData">The text before the change occured.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.InputEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.IPanel">
      <summary>
        <para>Interface for classes implementing UI panels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IPanel.contextType">
      <summary>
        <para>Describes in which context a VisualElement hierarchy is being ran.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IPanel.dispatcher">
      <summary>
        <para>This Panel EventDispatcher.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IPanel.focusController">
      <summary>
        <para>Return the focus controller for this panel.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IPanel.visualTree">
      <summary>
        <para>Root of the VisualElement hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IPanel.Pick(UnityEngine.Vector2)">
      <summary>
        <para>Returns the top element at this position. Will not return elements with pickingMode set to PickingMode.Ignore.</para>
      </summary>
      <param name="point">World coordinates.</param>
      <returns>
        <para>Top VisualElement at the position. Null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.IPanel.PickAll(UnityEngine.Vector2,System.Collections.Generic.List`1&lt;UnityEngine.UIElements.VisualElement&gt;)">
      <summary>
        <para>Returns all elements at this position. Will not return elements with pickingMode set to PickingMode.Ignore.</para>
      </summary>
      <param name="point">World coordinates.</param>
      <param name="picked">All Visualelements overlapping this position.</param>
      <returns>
        <para>Top VisualElement at the position. Null if none was found.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.UIElements.IPanelChangedEvent">
      <summary>
        <para>Interface for panel change events.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.IResolvedStyle">
      <summary>
        <para>Style values after layout pass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.alignContent">
      <summary>
        <para>Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.alignItems">
      <summary>
        <para>Alignment of children on the cross axis of this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.alignSelf">
      <summary>
        <para>Similar to align-items, but only for this specific element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.backgroundColor">
      <summary>
        <para>Background color to paint in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.borderBottomLeftRadius">
      <summary>
        <para>The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.borderBottomRightRadius">
      <summary>
        <para>The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.borderBottomWidth">
      <summary>
        <para>Space reserved for the bottom edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.borderColor">
      <summary>
        <para>Color of the border to paint inside the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.borderLeftWidth">
      <summary>
        <para>Space reserved for the left edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.borderRightWidth">
      <summary>
        <para>Space reserved for the right edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.borderTopLeftRadius">
      <summary>
        <para>The radius of the top-left corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.borderTopRightRadius">
      <summary>
        <para>The radius of the top-right corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.borderTopWidth">
      <summary>
        <para>Space reserved for the top edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.bottom">
      <summary>
        <para>Bottom distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.color">
      <summary>
        <para>Color to use when drawing the text of an element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.display">
      <summary>
        <para>Defines how an element is displayed in the layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.flexBasis">
      <summary>
        <para>Initial main size of a flex item, on the main flex axis. The final layout mught be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.flexDirection">
      <summary>
        <para>Direction of the main axis to layout children in a container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.flexGrow">
      <summary>
        <para>Specifies how much the item will grow relative to the rest of the flexible items inside the same container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.flexShrink">
      <summary>
        <para>Specifies how the item will shrink relative to the rest of the flexible items inside the same container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.flexWrap">
      <summary>
        <para>Placement of children over multiple lines if not enough space is available in this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.fontSize">
      <summary>
        <para>Font size to draw the element's text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.height">
      <summary>
        <para>Fixed height of an element for the layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.justifyContent">
      <summary>
        <para>Justification of children on the main axis of this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.left">
      <summary>
        <para>Left distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.marginBottom">
      <summary>
        <para>Space reserved for the bottom edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.marginLeft">
      <summary>
        <para>Space reserved for the left edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.marginRight">
      <summary>
        <para>Space reserved for the right edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.marginTop">
      <summary>
        <para>Space reserved for the top edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.maxHeight">
      <summary>
        <para>Maximum height for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.maxWidth">
      <summary>
        <para>Maximum width for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.minHeight">
      <summary>
        <para>Minimum height for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.minWidth">
      <summary>
        <para>Minimum width for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.opacity">
      <summary>
        <para>Specifies the transparency of an element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.paddingBottom">
      <summary>
        <para>Space reserved for the bottom edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.paddingLeft">
      <summary>
        <para>Space reserved for the left edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.paddingRight">
      <summary>
        <para>Space reserved for the right edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.paddingTop">
      <summary>
        <para>Space reserved for the top edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.position">
      <summary>
        <para>Element's positioning in its parent container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.right">
      <summary>
        <para>Right distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.top">
      <summary>
        <para>Top distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.unityBackgroundImageTintColor">
      <summary>
        <para>Tinting color for the element's backgroundImage</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.unityBackgroundScaleMode">
      <summary>
        <para>Background image scaling in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.unityFont">
      <summary>
        <para>Font to draw the element's text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.unityFontStyleAndWeight">
      <summary>
        <para>Font style and weight (normal, bold, italic) to draw the element's text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.unitySliceBottom">
      <summary>
        <para>Size of the 9-slice's bottom edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.unitySliceLeft">
      <summary>
        <para>Size of the 9-slice's left edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.unitySliceRight">
      <summary>
        <para>Size of the 9-slice's right edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.unitySliceTop">
      <summary>
        <para>Size of the 9-slice's top edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.unityTextAlign">
      <summary>
        <para>Horizontal and vertical text alignment in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.visibility">
      <summary>
        <para>Specifies whether or not an element is visible.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.whiteSpace">
      <summary>
        <para>Word wrapping over multiple lines if not enough space is available to draw the text of an element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IResolvedStyle.width">
      <summary>
        <para>Word wrapping over multiple lines if not enough space is available to draw the text of an element.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.IStyle">
      <summary>
        <para>This interface provides access to a VisualElement inline style data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.alignContent">
      <summary>
        <para>Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.alignItems">
      <summary>
        <para>Alignment of children on the cross axis of this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.alignSelf">
      <summary>
        <para>Similar to align-items, but only for this specific element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.backgroundColor">
      <summary>
        <para>Background color to paint in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.backgroundImage">
      <summary>
        <para>Background image to paint in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.borderBottomLeftRadius">
      <summary>
        <para>The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.borderBottomRightRadius">
      <summary>
        <para>The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.borderBottomWidth">
      <summary>
        <para>Space reserved for the bottom edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.borderColor">
      <summary>
        <para>Color of the border to paint inside the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.borderLeftWidth">
      <summary>
        <para>Space reserved for the left edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.borderRightWidth">
      <summary>
        <para>Space reserved for the right edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.borderTopLeftRadius">
      <summary>
        <para>The radius of the top-left corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.borderTopRightRadius">
      <summary>
        <para>The radius of the top-right corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.borderTopWidth">
      <summary>
        <para>Space reserved for the top edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.bottom">
      <summary>
        <para>Bottom distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.color">
      <summary>
        <para>Color to use when drawing the text of an element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.cursor">
      <summary>
        <para>Mouse cursor to display when the mouse pointer is over an element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.display">
      <summary>
        <para>Defines how an element is displayed in the layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.flexBasis">
      <summary>
        <para>Initial main size of a flex item, on the main flex axis. The final layout mught be smaller or larger, according to the flex shrinking and growing determined by the flex property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.flexDirection">
      <summary>
        <para>Direction of the main axis to layout children in a container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.flexGrow">
      <summary>
        <para>Specifies how much the item will grow relative to the rest of the flexible items inside the same container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.flexShrink">
      <summary>
        <para>Specifies how the item will shrink relative to the rest of the flexible items inside the same container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.flexWrap">
      <summary>
        <para>Placement of children over multiple lines if not enough space is available in this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.fontSize">
      <summary>
        <para>Font size to draw the element's text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.height">
      <summary>
        <para>Fixed height of an element for the layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.justifyContent">
      <summary>
        <para>Justification of children on the main axis of this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.left">
      <summary>
        <para>Left distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.marginBottom">
      <summary>
        <para>Space reserved for the bottom edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.marginLeft">
      <summary>
        <para>Space reserved for the left edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.marginRight">
      <summary>
        <para>Space reserved for the right edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.marginTop">
      <summary>
        <para>Space reserved for the top edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.maxHeight">
      <summary>
        <para>Maximum height for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.maxWidth">
      <summary>
        <para>Maximum width for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.minHeight">
      <summary>
        <para>Minimum height for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.minWidth">
      <summary>
        <para>Minimum width for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.opacity">
      <summary>
        <para>Specifies the transparency of an element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.overflow">
      <summary>
        <para>How a container behaves if its content overflows its own box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.paddingBottom">
      <summary>
        <para>Space reserved for the bottom edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.paddingLeft">
      <summary>
        <para>Space reserved for the left edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.paddingRight">
      <summary>
        <para>Space reserved for the right edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.paddingTop">
      <summary>
        <para>Space reserved for the top edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.position">
      <summary>
        <para>Element's positioning in its parent container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.right">
      <summary>
        <para>Right distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.top">
      <summary>
        <para>Top distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.unityBackgroundImageTintColor">
      <summary>
        <para>Tinting color for the element's backgroundImage</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.unityBackgroundScaleMode">
      <summary>
        <para>Background image scaling in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.unityFont">
      <summary>
        <para>Font to draw the element's text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.unityFontStyleAndWeight">
      <summary>
        <para>Size of the 9-slice's bottom edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.unitySliceBottom">
      <summary>
        <para>Size of the 9-slice's bottom edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.unitySliceLeft">
      <summary>
        <para>Size of the 9-slice's left edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.unitySliceRight">
      <summary>
        <para>Size of the 9-slice's right edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.unitySliceTop">
      <summary>
        <para>Size of the 9-slice's top edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.unityTextAlign">
      <summary>
        <para>Horizontal and vertical text alignment in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.visibility">
      <summary>
        <para>Specifies whether or not an element is visible.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.whiteSpace">
      <summary>
        <para>Word wrapping over multiple lines if not enough space is available to draw the text of an element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IStyle.width">
      <summary>
        <para>Fixed width of an element for the layout.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.ITransform">
      <summary>
        <para>This interface provides access to a VisualElement transform data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ITransform.matrix">
      <summary>
        <para>Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ITransform.position">
      <summary>
        <para>The position of the VisualElement's transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ITransform.rotation">
      <summary>
        <para>The rotation of the VisualElement's transform stored as a Quaternion.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ITransform.scale">
      <summary>
        <para>The scale of the VisualElement's transform.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.IUxmlAttributes">
      <summary>
        <para>This type allows UXML attribute value retrieval during the VisualElement instantiation. An instance will be provided to the factory method - see UXMLFactoryAttribute.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IUxmlAttributes.TryGetAttributeValue(System.String,System.String&amp;)">
      <summary>
        <para>Get the value of an attribute as a string.</para>
      </summary>
      <param name="attributeName">Attribute name.</param>
      <param name="value">The attribute value or null if not found.</param>
      <returns>
        <para>True if the attribute was found, false otherwise.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.UIElements.IUxmlFactory">
      <summary>
        <para>Interface for UXML factories. While it is not strictly required, concrete factories should derive from the generic class UxmlFactory.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IUxmlFactory.canHaveAnyAttribute">
      <summary>
        <para>Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IUxmlFactory.substituteForTypeName">
      <summary>
        <para>The type of element for which this element type can substitute for.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IUxmlFactory.substituteForTypeNamespace">
      <summary>
        <para>The UXML namespace for the type returned by substituteForTypeName.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IUxmlFactory.substituteForTypeQualifiedName">
      <summary>
        <para>The fully qualified XML name for the type returned by substituteForTypeName.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IUxmlFactory.uxmlAttributesDescription">
      <summary>
        <para>Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IUxmlFactory.uxmlChildElementsDescription">
      <summary>
        <para>Describes the types of element that can appear as children of this element in a UXML file.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IUxmlFactory.uxmlName">
      <summary>
        <para>The name of the UXML element read by the factory.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IUxmlFactory.uxmlNamespace">
      <summary>
        <para>The namespace of the UXML element read by the factory.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IUxmlFactory.uxmlQualifiedName">
      <summary>
        <para>The fully qualified name of the UXML element read by the factory.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IUxmlFactory.AcceptsAttributeBag">
      <summary>
        <para>Returns true if the factory accepts the content of the attribute bag.</para>
      </summary>
      <param name="bag">The attribute bag.</param>
      <returns>
        <para>True if the factory accepts the content of the attribute bag. False otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.IUxmlFactory.Create(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Instanciate and initialize an object of type T0.</para>
      </summary>
      <param name="bag">A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.</param>
      <param name="cc">When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.</param>
      <returns>
        <para>The created object.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.UIElements.IVisualElementScheduledItem">
      <summary>
        <para>Represents a scheduled task created with a VisualElement's schedule interface.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IVisualElementScheduledItem.element">
      <summary>
        <para>Returns the VisualElement this object is associated with.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.IVisualElementScheduledItem.isActive">
      <summary>
        <para>Will be true when this item is scheduled. Note that an item's callback will only be executed when it's VisualElement is attached to a panel.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IVisualElementScheduledItem.Every(System.Int64)">
      <summary>
        <para>Repeats this action after a specified time.</para>
      </summary>
      <param name="intervalMs">Minimum amount of time in milliseconds between each action execution.</param>
      <returns>
        <para>This ScheduledItem.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.IVisualElementScheduledItem.ExecuteLater(System.Int64)">
      <summary>
        <para>Cancels any previously scheduled execution of this item and re-schedules the item.</para>
      </summary>
      <param name="delayMs">Minimum time in milliseconds before this item will be executed.</param>
    </member>
    <member name="M:UnityEngine.UIElements.IVisualElementScheduledItem.ForDuration(System.Int64)">
      <summary>
        <para>After specified duration, the item will be automatically unscheduled.</para>
      </summary>
      <param name="durationMs">The total duration in milliseconds where this item will be active.</param>
      <returns>
        <para>This ScheduledItem.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.IVisualElementScheduledItem.Pause">
      <summary>
        <para>Removes this item from its VisualElement's scheduler.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IVisualElementScheduledItem.Resume">
      <summary>
        <para>If not already active, will schedule this item on its VisualElement's scheduler.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IVisualElementScheduledItem.StartingIn(System.Int64)">
      <summary>
        <para>Adds a delay to the first invokation.</para>
      </summary>
      <param name="delayMs">The minimum number of milliseconds after activation where this item's action will be executed.</param>
      <returns>
        <para>This ScheduledItem.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.IVisualElementScheduledItem.Until(System.Func`1&lt;System.Boolean&gt;)">
      <summary>
        <para>Item will be unscheduled automatically when specified condition is met.</para>
      </summary>
      <param name="stopCondition">When condition returns true, the item will be unscheduled.</param>
      <returns>
        <para>This ScheduledItem.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.UIElements.IVisualElementScheduler">
      <summary>
        <para>A scheduler allows you to register actions to be executed at a later point.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.IVisualElementScheduler.Execute(System.Action`1&lt;UnityEngine.UIElements.TimerState&gt;)">
      <summary>
        <para>Schedule this action to be executed later.</para>
      </summary>
      <param name="timerUpdateEvent">The action to be executed.</param>
      <param name="updateEvent">The action to be executed.</param>
      <returns>
        <para>Reference to the scheduled action.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.IVisualElementScheduler.Execute(System.Action)">
      <summary>
        <para>Schedule this action to be executed later.</para>
      </summary>
      <param name="timerUpdateEvent">The action to be executed.</param>
      <param name="updateEvent">The action to be executed.</param>
      <returns>
        <para>Reference to the scheduled action.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.Justify">
      <summary>
        <para>Defines the alignment along the main axis, how is extra space distributed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Justify.Center">
      <summary>
        <para>Items are centered along the line.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Justify.FlexEnd">
      <summary>
        <para>Items are packed toward the end line.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Justify.FlexStart">
      <summary>
        <para>Items are packed toward the start line. Default Value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Justify.SpaceAround">
      <summary>
        <para>Items are evenly distributed in the line with equal space around them.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Justify.SpaceBetween">
      <summary>
        <para>Items are evenly distributed in the line; first item is on the start line, last item on the end line.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.KeyboardEventBase`1">
      <summary>
        <para>Base class for keyboard events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.KeyboardEventBase_1.actionKey">
      <summary>
        <para>Returns true if the platform specific action key is pressed. This key is Command on macOS and Control otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.KeyboardEventBase_1.altKey">
      <summary>
        <para>Returns true if the Alt key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.KeyboardEventBase_1.character">
      <summary>
        <para>The character.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.KeyboardEventBase_1.commandKey">
      <summary>
        <para>Returns true if the Windows/Command key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.KeyboardEventBase_1.ctrlKey">
      <summary>
        <para>Returns true if the Control key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.KeyboardEventBase_1.keyCode">
      <summary>
        <para>The key code.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.KeyboardEventBase_1.modifiers">
      <summary>
        <para>Flags holding the pressed modifier keys (Alt, Control, Shift, Windows/Command).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.KeyboardEventBase_1.shiftKey">
      <summary>
        <para>Returns true if the Shift key is pressed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.KeyboardEventBase_1.GetPooled(System.Char,UnityEngine.KeyCode,UnityEngine.EventModifiers)">
      <summary>
        <para>Gets a keyboard event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="c">The character for this event.</param>
      <param name="keyCode">The keyCode for this event.</param>
      <param name="modifiers">Event modifier keys that are active for this event.</param>
      <param name="systemEvent">A keyboard IMGUI event.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.KeyboardEventBase_1.GetPooled(UnityEngine.Event)">
      <summary>
        <para>Gets a keyboard event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="c">The character for this event.</param>
      <param name="keyCode">The keyCode for this event.</param>
      <param name="modifiers">Event modifier keys that are active for this event.</param>
      <param name="systemEvent">A keyboard IMGUI event.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.KeyboardEventBase_1.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.KeyDownEvent">
      <summary>
        <para>Event sent when a key is pressed on the keyboard. This event trickles down and bubbles up. This event is cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.KeyDownEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.KeyUpEvent">
      <summary>
        <para>Event sent when a key is released on the keyboard. This event trickles down and bubbles up. This event is cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.KeyUpEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Label">
      <summary>
        <para>Provides an Element displaying text.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Label.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Label.#ctor">
      <summary>
        <para>Constructs a label.</para>
      </summary>
      <param name="text">The text to be displayed.</param>
    </member>
    <member name="M:UnityEngine.UIElements.Label.#ctor(System.String)">
      <summary>
        <para>Constructs a label.</para>
      </summary>
      <param name="text">The text to be displayed.</param>
    </member>
    <member name="T:UnityEngine.UIElements.Label.UxmlFactory">
      <summary>
        <para>Instantiates a Label using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Label.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Label.UxmlTraits">
      <summary>
        <para>UxmlTraits for the Label.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Label.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Length">
      <summary>
        <para>Reprensents a distance value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Length.unit">
      <summary>
        <para>The unit of the value property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Length.value">
      <summary>
        <para>The length value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Length.#ctor(System.Single)">
      <summary>
        <para>Creates from a float and an optionnal LengthUnit.</para>
      </summary>
      <param name="value"></param>
      <param name="unit"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Length.#ctor(System.Single,UnityEngine.UIElements.LengthUnit)">
      <summary>
        <para>Creates from a float and an optionnal LengthUnit.</para>
      </summary>
      <param name="value"></param>
      <param name="unit"></param>
    </member>
    <member name="T:UnityEngine.UIElements.LengthUnit">
      <summary>
        <para>Describes how to interpret a Length value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.LengthUnit.Pixel">
      <summary>
        <para>Interprets length as pixel.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.ListView">
      <summary>
        <para>A vertically scrollable area that only creates visual elements for visible items while allowing the binding of many more items. As the user scrolls, visual elements are recycled and re-bound to new data items.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ListView.bindItem">
      <summary>
        <para>Callback for binding a data item to the visual element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ListView.itemHeight">
      <summary>
        <para>ListView requires all visual elements to have the same height so that it can calculate a sensible scroller size. This property must be set for the list view to function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ListView.itemSelectedVariantUssClassName">
      <summary>
        <para>USS class name of item elements in elements of this type, when they are selected.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ListView.itemsSource">
      <summary>
        <para>The items data source. This property must be set for the list view to function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ListView.itemUssClassName">
      <summary>
        <para>USS class name of item elements in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ListView.makeItem">
      <summary>
        <para>Callback for constructing the VisualElement that will serve as the template for each recycled and re-bound element in the list. This property must be set for the list view to function.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.ListView.onItemChosen(System.Action`1&lt;System.Object&gt;)">
      <summary>
        <para>Callback for when an item is chosen (double-click). This is different from just a selection.</para>
      </summary>
      <param name="value">The chosen item.</param>
    </member>
    <member name="?:UnityEngine.UIElements.ListView.onSelectionChanged(System.Action`1&lt;System.Collections.Generic.List`1&lt;System.Object&gt;&gt;)">
      <summary>
        <para>Callback for a selection change.</para>
      </summary>
      <param name="value">List of selected items.</param>
    </member>
    <member name="P:UnityEngine.UIElements.ListView.selectedIndex">
      <summary>
        <para>Currently selected item index in the items source. If multiple items are selected, this will return the first selected item's index.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ListView.selectedItem">
      <summary>
        <para>The currently selected item from the items source. If multiple items are selected, this will return the first selected item.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ListView.selectionType">
      <summary>
        <para>Controls the selection state, whether: selections are disabled, there is only one selectable item, or if there are multiple selectable items.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ListView.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ListView.Refresh">
      <summary>
        <para>Clear, recreate all visible visual elements, and rebind all items. This should be called whenever the items source changes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ListView.ScrollTo(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Scroll to a specific visual element.</para>
      </summary>
      <param name="visualElement">Element to scroll to.</param>
    </member>
    <member name="M:UnityEngine.UIElements.ListView.ScrollToItem(System.Int32)">
      <summary>
        <para>Scroll so that a specific item index from the items source is visible.</para>
      </summary>
      <param name="index">Item index to scroll to.</param>
    </member>
    <member name="T:UnityEngine.UIElements.ListView.UxmlFactory">
      <summary>
        <para>Instantiates a ListView using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ListView.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.ListView.UxmlTraits">
      <summary>
        <para>UxmlTraits for the ListView.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ListView.UxmlTraits.uxmlChildElementsDescription">
      <summary>
        <para>Returns an empty enumerable, as list views generally do not have children.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ListView.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ListView.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize ListView properties using values from the attribute bag.</para>
      </summary>
      <param name="ve">The object to initialize.</param>
      <param name="bag">The attribute bag.</param>
      <param name="cc">The creation context; unused.</param>
    </member>
    <member name="T:UnityEngine.UIElements.Manipulator">
      <summary>
        <para>Base class for all Manipulator implementations.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Manipulator.target">
      <summary>
        <para>VisualElement being manipulated.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Manipulator.RegisterCallbacksOnTarget">
      <summary>
        <para>Called to register event callbacks on the target element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Manipulator.UnregisterCallbacksFromTarget">
      <summary>
        <para>Called to unregister event callbacks from the target element.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.ManipulatorActivationFilter">
      <summary>
        <para>Used by manipulators to match events against their requirements.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ManipulatorActivationFilter.button">
      <summary>
        <para>The button that activates the manipulation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ManipulatorActivationFilter.clickCount">
      <summary>
        <para>Number of mouse clicks required to activate the manipulator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ManipulatorActivationFilter.modifiers">
      <summary>
        <para>Any modifier keys (ie. ctrl, alt, ...) that are needed to activate the manipulation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ManipulatorActivationFilter.Matches(UnityEngine.UIElements.IMouseEvent)">
      <summary>
        <para>Returns true if the current mouse event satisfies the activation requirements.</para>
      </summary>
      <param name="e">The mouse event.</param>
      <returns>
        <para>True if the event matches the requirements.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.MinMaxSlider">
      <summary>
        <para>A min/max slider containing a representation of a range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.MinMaxSlider.draggerUssClassName">
      <summary>
        <para>USS class name of dragger elements in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MinMaxSlider.highLimit">
      <summary>
        <para>This is the high limit of the slider.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.MinMaxSlider.inputUssClassName">
      <summary>
        <para>USS class name of input elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.MinMaxSlider.labelUssClassName">
      <summary>
        <para>USS class name of labels in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MinMaxSlider.lowLimit">
      <summary>
        <para>This is the low limit of the slider.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.MinMaxSlider.maxThumbUssClassName">
      <summary>
        <para>USS class name of the maximum thumb elements in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MinMaxSlider.maxValue">
      <summary>
        <para>This is the high value of the range represented on the slider.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.MinMaxSlider.minThumbUssClassName">
      <summary>
        <para>USS class name of the minimum thumb elements in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MinMaxSlider.minValue">
      <summary>
        <para>This is the low value of the range represented on the slider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MinMaxSlider.range">
      <summary>
        <para>Returns the range of the low/high limits of the slider.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.MinMaxSlider.trackerUssClassName">
      <summary>
        <para>USS class name of tracker elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.MinMaxSlider.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MinMaxSlider.value">
      <summary>
        <para>This is the value of the slider. This is a Vector2 where the x is the lower bound and the y is the higher bound.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MinMaxSlider.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="minValue">The minimum value in the range to be represented.</param>
      <param name="maxValue">The maximum value in the range to be represented.</param>
      <param name="minLimit">The minimum value of the slider limit.</param>
      <param name="maxLimit">The maximum value of the slider limit.</param>
      <param name="direction">This is the sldier direction, for now, only Horizontal is supported.</param>
    </member>
    <member name="M:UnityEngine.UIElements.MinMaxSlider.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="minValue">The minimum value in the range to be represented.</param>
      <param name="maxValue">The maximum value in the range to be represented.</param>
      <param name="minLimit">The minimum value of the slider limit.</param>
      <param name="maxLimit">The maximum value of the slider limit.</param>
      <param name="direction">This is the sldier direction, for now, only Horizontal is supported.</param>
    </member>
    <member name="T:UnityEngine.UIElements.MinMaxSlider.UxmlFactory">
      <summary>
        <para>Instantiates a MinMaxSlider using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MinMaxSlider.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MinMaxSlider.UxmlTraits">
      <summary>
        <para>UxmlTraits for the MinMaxSlider.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MinMaxSlider.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MinMaxSlider.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize MinMaxSlider properties using values from the attribute bag.</para>
      </summary>
      <param name="ve">The element to initialize.</param>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">Creation Context, unused.</param>
    </member>
    <member name="T:UnityEngine.UIElements.MouseButton">
      <summary>
        <para>Describes a MouseButton.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.MouseButton.LeftMouse">
      <summary>
        <para>The Left Mouse Button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.MouseButton.MiddleMouse">
      <summary>
        <para>The Middle Mouse Button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.MouseButton.RightMouse">
      <summary>
        <para>The Right Mouse Button.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseCaptureController">
      <summary>
        <para>Class that manages capturing mouse events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseCaptureController.CaptureMouse(UnityEngine.UIElements.IEventHandler)">
      <summary>
        <para>Assigns an event handler to capture mouse events.</para>
      </summary>
      <param name="handler">The event handler that captures mouse events.</param>
    </member>
    <member name="M:UnityEngine.UIElements.MouseCaptureController.HasMouseCapture(UnityEngine.UIElements.IEventHandler)">
      <summary>
        <para>Checks if the event handler is capturing the mouse.</para>
      </summary>
      <param name="handler">Event handler to check.</param>
      <returns>
        <para>True if the handler captures the mouse.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.MouseCaptureController.IsMouseCaptured">
      <summary>
        <para>Checks if there is a handler capturing the mouse.</para>
      </summary>
      <returns>
        <para>Returns true if a handler is capturing the mouse, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.MouseCaptureController.ReleaseMouse(UnityEngine.UIElements.IEventHandler)">
      <summary>
        <para>Stops an event handler from capturing the mouse.</para>
      </summary>
      <param name="handler">The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.</param>
    </member>
    <member name="M:UnityEngine.UIElements.MouseCaptureController.ReleaseMouse">
      <summary>
        <para>Stops an event handler from capturing the mouse.</para>
      </summary>
      <param name="handler">The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.</param>
    </member>
    <member name="T:UnityEngine.UIElements.MouseCaptureEvent">
      <summary>
        <para>Event sent after a handler starts capturing the mouse.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseCaptureEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseCaptureEventBase`1">
      <summary>
        <para>Event sent when the handler capturing the mouse changes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseCaptureEventBase_1.relatedTarget">
      <summary>
        <para>In the case of a MouseCaptureEvent, this property is the IEventHandler that loses the capture. In the case of a MouseCaptureOutEvent, this property is the IEventHandler that gains the capture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseCaptureEventBase_1.GetPooled(UnityEngine.UIElements.IEventHandler,UnityEngine.UIElements.IEventHandler)">
      <summary>
        <para>Retrieves an event from the event pool. Use this method to retrieve a mouse event and initialize the event, instead of creating a new mouse event. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="target">The handler taking or releasing the mouse capture.</param>
      <param name="relatedTarget">The related target.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.MouseCaptureEventBase_1.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseCaptureOutEvent">
      <summary>
        <para>Event sent before a handler stops capturing the mouse.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseCaptureOutEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseDownEvent">
      <summary>
        <para>Mouse down event.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseDownEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseEnterEvent">
      <summary>
        <para>Event sent when the mouse pointer enters an element or one of its descendent elements. The event is cancellable, it does not trickle down, and it does not bubble up.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseEnterEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseEnterEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseEnterWindowEvent">
      <summary>
        <para>Event sent when the mouse pointer enters a window. The event is cancellable, it does not trickle down, and it does not bubble up.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseEnterWindowEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseEnterWindowEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseEventBase`1">
      <summary>
        <para>The base class for mouse events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.actionKey">
      <summary>
        <para>Returns true if the platform specific action key is pressed. This key is Command on macOS and Control otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.altKey">
      <summary>
        <para>Returns true if the Alt key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.button">
      <summary>
        <para>Integer representing the pressed mouse button: 0 is left, 1 is right, 2 is center.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.clickCount">
      <summary>
        <para>Number of clicks.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.commandKey">
      <summary>
        <para>Returns true if the Windows/Command key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.ctrlKey">
      <summary>
        <para>Returns true if the Control key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.currentTarget">
      <summary>
        <para>The current target of the event. The current target is the element in the propagation path for which event handlers are currently being executed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.localMousePosition">
      <summary>
        <para>The mouse position in the current target coordinate system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.modifiers">
      <summary>
        <para>Flags holding the pressed modifier keys (Alt, Control, Shift, Windows/Command).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.mouseDelta">
      <summary>
        <para>The difference of the mouse position between the previous mouse event and the current mouse event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.mousePosition">
      <summary>
        <para>The mouse position in the screen coordinate system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseEventBase_1.shiftKey">
      <summary>
        <para>Returns true if the Shift key is pressed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseEventBase_1.GetPooled(UnityEngine.Event)">
      <summary>
        <para>Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="systemEvent">A mouse IMGUI event.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.MouseEventBase_1.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseLeaveEvent">
      <summary>
        <para>Event sent when the mouse pointer exits an element and all its descendent elements. The event is cancellable, it does not trickle down, and it does not bubble up.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseLeaveEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseLeaveEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseLeaveWindowEvent">
      <summary>
        <para>Event sent when the mouse pointer exits a window. The event is cancellable, it does not trickle down, and it does not bubble up.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseLeaveWindowEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseLeaveWindowEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseManipulator">
      <summary>
        <para>MouseManipulators have a list of activation filters.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.MouseManipulator.activators">
      <summary>
        <para>List of Activationfilters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseManipulator.CanStartManipulation(UnityEngine.UIElements.IMouseEvent)">
      <summary>
        <para>Checks if MouseEvent matches agains all the MouseActivationFilters requirements.</para>
      </summary>
      <param name="e">The MouseEvent to validate.</param>
      <returns>
        <para>True if event passes all filters.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.MouseManipulator.CanStopManipulation(UnityEngine.UIElements.IMouseEvent)">
      <summary>
        <para>Checks if MouseEvent is related to this Manipulator.</para>
      </summary>
      <param name="e">MouseEvent to validate.</param>
      <returns>
        <para>Returns true if mouseEvent uses the current activator button.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.MouseMoveEvent">
      <summary>
        <para>Mouse move event.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseMoveEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseOutEvent">
      <summary>
        <para>Event sent when the mouse pointer exits an element. The event trickles down, it bubbles up, and it is cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseOutEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseOverEvent">
      <summary>
        <para>Event sent when the mouse pointer enters an element. The event trickles down, it bubbles up, and it is cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseOverEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.MouseUpEvent">
      <summary>
        <para>Mouse up event.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.MouseUpEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Overflow">
      <summary>
        <para>Defines what should happend if content overflows an element bounds.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Overflow.Hidden">
      <summary>
        <para>The overflow is clipped, and the rest of the content will be invisible.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Overflow.Visible">
      <summary>
        <para>The overflow is not clipped. It renders outside the element's box. Default Value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.PanelChangedEventBase`1">
      <summary>
        <para>Abstract base class for events notifying of a panel change.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.PanelChangedEventBase_1.destinationPanel">
      <summary>
        <para>In the case of AttachToPanelEvent, the panel to which the event target element is now attached. In the case of DetachFromPanelEvent, the panel to which the event target element will be attached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.PanelChangedEventBase_1.originPanel">
      <summary>
        <para>In the case of AttachToPanelEvent, the panel to which the event target element was attached. In the case of DetachFromPanelEvent, the panel from which the event target element is detached.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.PanelChangedEventBase_1.GetPooled(UnityEngine.UIElements.IPanel,UnityEngine.UIElements.IPanel)">
      <summary>
        <para>Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="originPanel">Sets the originPanel property of the event.</param>
      <param name="destinationPanel">Sets the destinationPanel property of the event.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.PanelChangedEventBase_1.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.PickingMode">
      <summary>
        <para>Describes the picking behavior.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.PickingMode.Ignore">
      <summary>
        <para>Disables picking.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.PickingMode.Position">
      <summary>
        <para>Picking enabled. Default Value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.PopupWindow">
      <summary>
        <para>Styled visual element that matches the EditorGUILayout.Popup IMGUI element.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.PopupWindow.contentUssClassName">
      <summary>
        <para>USS class name of content elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.PopupWindow.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.PopupWindow.UxmlFactory">
      <summary>
        <para>Instantiates a PopupWindow using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.PopupWindow.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.PopupWindow.UxmlTraits">
      <summary>
        <para>UxmlTraits for the PopupWindow.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.PopupWindow.UxmlTraits.uxmlChildElementsDescription">
      <summary>
        <para>Returns an empty enumerable, as popup windows generally do not have children.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.PopupWindow.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Position">
      <summary>
        <para>Defaines how the position values are interpreted by the layout engine.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Position.Absolute">
      <summary>
        <para>The element is positioned in relation to its parent box and does not contribute to the layout anymore.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Position.Relative">
      <summary>
        <para>The element is positioned in relation to its default box as calculated by layout.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.PropagationPhase">
      <summary>
        <para>The propagation phases of an event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.PropagationPhase.AtTarget">
      <summary>
        <para>The event is being sent to the event target.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.PropagationPhase.BubbleUp">
      <summary>
        <para>The event is being sent to the event target parent element up to the root element.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.PropagationPhase.DefaultAction">
      <summary>
        <para>The event is being sent to the target element for it to execute its default actions for this event. Event handlers do not get the events in this phase. Instead, ExecuteDefaultAction is called on the target.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.PropagationPhase.None">
      <summary>
        <para>The event is not being propagated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.PropagationPhase.TrickleDown">
      <summary>
        <para>The event is being sent from the root element to the target parent element.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.RepeatButton">
      <summary>
        <para>A button that executes an action repeatedly while it is pressed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.RepeatButton.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.RepeatButton.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="clickEvent">The action to execute when the button is pressed.</param>
      <param name="delay">The initial delay before the action is executed for the first time.</param>
      <param name="interval">The interval between each execution of the action.</param>
    </member>
    <member name="M:UnityEngine.UIElements.RepeatButton.#ctor(System.Action,System.Int64,System.Int64)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="clickEvent">The action to execute when the button is pressed.</param>
      <param name="delay">The initial delay before the action is executed for the first time.</param>
      <param name="interval">The interval between each execution of the action.</param>
    </member>
    <member name="M:UnityEngine.UIElements.RepeatButton.SetAction(System.Action,System.Int64,System.Int64)">
      <summary>
        <para>Set the action that should be executed when the button is pressed.</para>
      </summary>
      <param name="clickEvent">The action to execute.</param>
      <param name="delay">The initial delay before the action is executed for the first time.</param>
      <param name="interval">The interval between each execution of the action.</param>
    </member>
    <member name="T:UnityEngine.UIElements.RepeatButton.UxmlFactory">
      <summary>
        <para>Instantiates a RepeatButton using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.RepeatButton.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.RepeatButton.UxmlTraits">
      <summary>
        <para>UxmlTraits for the RepeatButton.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.RepeatButton.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.RepeatButton.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize RepeatButton properties using values from the attribute bag.</para>
      </summary>
      <param name="ve">The object to initialize.</param>
      <param name="bag">The attribute bag.</param>
      <param name="cc">The creation context; unused.</param>
    </member>
    <member name="T:UnityEngine.UIElements.Scroller">
      <summary>
        <para>A vertical or horizontal scrollbar.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Scroller.direction">
      <summary>
        <para>Direction of this scrollbar.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Scroller.highButton">
      <summary>
        <para>Top or right scroll button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Scroller.highButtonUssClassName">
      <summary>
        <para>USS class name of high buttons in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Scroller.highValue">
      <summary>
        <para>Maximum value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Scroller.horizontalVariantUssClassName">
      <summary>
        <para>USS class name of elements of this type, when they are displayed horizontally.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Scroller.lowButton">
      <summary>
        <para>Bottom or left scroll button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Scroller.lowButtonUssClassName">
      <summary>
        <para>USS class name of low buttons in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Scroller.lowValue">
      <summary>
        <para>Minimum value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Scroller.slider">
      <summary>
        <para>The slider used by this scroller.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Scroller.sliderUssClassName">
      <summary>
        <para>USS class name of slider elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Scroller.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Scroller.value">
      <summary>
        <para>Value that defines the slider position. It lies between lowValue and highValue.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.Scroller.valueChanged(System.Action`1&lt;System.Single&gt;)">
      <summary>
        <para>Event sent when the slider value has changed.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="F:UnityEngine.UIElements.Scroller.verticalVariantUssClassName">
      <summary>
        <para>USS class name of elements of this type, when they are displayed vertically.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Scroller.Adjust(System.Single)">
      <summary>
        <para>Updates the slider element size as a ratio of total range. A value greater than 1 will disable the Scroller.</para>
      </summary>
      <param name="factor">Slider size ratio.</param>
    </member>
    <member name="M:UnityEngine.UIElements.Scroller.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="lowValue"></param>
      <param name="highValue"></param>
      <param name="valueChanged"></param>
      <param name="direction"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Scroller.#ctor(System.Single,System.Single,System.Action`1&lt;System.Single&gt;,UnityEngine.UIElements.SliderDirection)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="lowValue"></param>
      <param name="highValue"></param>
      <param name="valueChanged"></param>
      <param name="direction"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Scroller.ScrollPageDown">
      <summary>
        <para>Will change the value according to the current slider pageSize.</para>
      </summary>
      <param name="factor"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Scroller.ScrollPageDown(System.Single)">
      <summary>
        <para>Will change the value according to the current slider pageSize.</para>
      </summary>
      <param name="factor"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Scroller.ScrollPageUp">
      <summary>
        <para>Will change the value according to the current slider pageSize.</para>
      </summary>
      <param name="factor"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Scroller.ScrollPageUp(System.Single)">
      <summary>
        <para>Will change the value according to the current slider pageSize.</para>
      </summary>
      <param name="factor"></param>
    </member>
    <member name="T:UnityEngine.UIElements.Scroller.UxmlFactory">
      <summary>
        <para>Instantiates a Scroller using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Scroller.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Scroller.UxmlTraits">
      <summary>
        <para>UxmlTraits for the Scroller.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Scroller.UxmlTraits.uxmlChildElementsDescription">
      <summary>
        <para>Returns an empty enumerable, as scrollers do not have children.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Scroller.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Scroller.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize Scroller properties using values from the attribute bag.</para>
      </summary>
      <param name="ve">The object to initialize.</param>
      <param name="bag">The attribute bag.</param>
      <param name="cc">The creation context; unused.</param>
    </member>
    <member name="T:UnityEngine.UIElements.ScrollView">
      <summary>
        <para>Displays its contents inside a scrollable frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ScrollView.contentContainer">
      <summary>
        <para>Contains full content, potentially partially visible.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ScrollView.contentUssClassName">
      <summary>
        <para>USS class name of content elements in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ScrollView.contentViewport">
      <summary>
        <para>Represents the visible part of contentContainer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ScrollView.horizontalPageSize">
      <summary>
        <para>This property is controlling the scrolling speed of the horizontal scroller.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ScrollView.horizontalScroller">
      <summary>
        <para>Horizontal scrollbar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ScrollView.hScrollerUssClassName">
      <summary>
        <para>USS class name of horizontal scrollers in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ScrollView.scrollOffset">
      <summary>
        <para>The current scrolling position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ScrollView.showHorizontal">
      <summary>
        <para>Should the horizontal scroller be visible.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ScrollView.showVertical">
      <summary>
        <para>Should the vertical scroller be visible.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ScrollView.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ScrollView.verticalPageSize">
      <summary>
        <para>This property is controlling the scrolling speed of the vertical scroller.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.ScrollView.verticalScroller">
      <summary>
        <para>Vertical Scrollbar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ScrollView.viewportUssClassName">
      <summary>
        <para>USS class name of viewport elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ScrollView.vScrollerUssClassName">
      <summary>
        <para>USS class name of vertical scrollers in elements of this type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ScrollView.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ScrollView.ScrollTo(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Scroll to a specific child element.</para>
      </summary>
      <param name="child">The child to scroll to.</param>
    </member>
    <member name="T:UnityEngine.UIElements.ScrollView.UxmlFactory">
      <summary>
        <para>Instantiates a ScrollView using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ScrollView.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.ScrollView.UxmlTraits">
      <summary>
        <para>UxmlTraits for the ScrollView.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ScrollView.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ScrollView.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize ScrollView properties using values from the attribute bag.</para>
      </summary>
      <param name="ve">The object to initialize.</param>
      <param name="bag">The attribute bag.</param>
      <param name="cc">The creation context; unused.</param>
    </member>
    <member name="T:UnityEngine.UIElements.ScrollViewMode">
      <summary>
        <para>Mode configuring the ScrollView for the intended usage.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ScrollViewMode.Horizontal">
      <summary>
        <para>Configure ScrollView for horizontal scrolling.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ScrollViewMode.Vertical">
      <summary>
        <para>Configure ScrollView for vertical scrolling.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.ScrollViewMode.VerticalAndHorizontal">
      <summary>
        <para>Configure ScrollView for vertical and horizontal scrolling.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.SelectionType">
      <summary>
        <para>Controls how many items can be selected at once.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.SelectionType.Multiple">
      <summary>
        <para>Multiple items are selectable at once.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.SelectionType.None">
      <summary>
        <para>Selections are disabled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.SelectionType.Single">
      <summary>
        <para>Only one item is selectable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Slider">
      <summary>
        <para>A slider containing floating point values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Slider.inputUssClassName">
      <summary>
        <para>USS class name of input elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Slider.labelUssClassName">
      <summary>
        <para>USS class name of labels in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Slider.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Slider.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="start"></param>
      <param name="end"></param>
      <param name="direction"></param>
      <param name="pageSize"></param>
      <param name="label"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Slider.#ctor(System.Single,System.Single,UnityEngine.UIElements.SliderDirection,System.Single)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="start"></param>
      <param name="end"></param>
      <param name="direction"></param>
      <param name="pageSize"></param>
      <param name="label"></param>
    </member>
    <member name="M:UnityEngine.UIElements.Slider.#ctor(System.String,System.Single,System.Single,UnityEngine.UIElements.SliderDirection,System.Single)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="start"></param>
      <param name="end"></param>
      <param name="direction"></param>
      <param name="pageSize"></param>
      <param name="label"></param>
    </member>
    <member name="T:UnityEngine.UIElements.Slider.UxmlFactory">
      <summary>
        <para>Instantiates a Slider using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Slider.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Slider.UxmlTraits">
      <summary>
        <para>UxmlTraits for the Slider.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Slider.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Slider.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize Slider properties using values from the attribute bag.</para>
      </summary>
      <param name="ve">The object to initialize.</param>
      <param name="bag">The attribute bag.</param>
      <param name="cc">The creation context; unused.</param>
    </member>
    <member name="T:UnityEngine.UIElements.SliderDirection">
      <summary>
        <para>This is the direction of the Slider and SliderInt.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.SliderDirection.Horizontal">
      <summary>
        <para>An horizontal slider is made with a SliderDirection Horizontal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.SliderDirection.Vertical">
      <summary>
        <para>An vertical slider is made with a SliderDirection Vertical.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.SliderInt">
      <summary>
        <para>A slider containing Integer discrete values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.SliderInt.inputUssClassName">
      <summary>
        <para>USS class name of input elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.SliderInt.labelUssClassName">
      <summary>
        <para>USS class name of labels in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.SliderInt.pageSize">
      <summary>
        <para>The value to add or remove to the SliderInt.value when it is clicked.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.SliderInt.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.SliderInt.#ctor">
      <summary>
        <para>Constructors for the SliderInt.</para>
      </summary>
      <param name="start">This is the low value of the slider.</param>
      <param name="end">This is the high value of the slider.</param>
      <param name="direction">This is the slider direction, horizontal or vertical.</param>
      <param name="pageSize">This is the number of values to change when the slider is clicked.</param>
    </member>
    <member name="M:UnityEngine.UIElements.SliderInt.#ctor">
      <summary>
        <para>Constructors for the SliderInt.</para>
      </summary>
      <param name="start">This is the low value of the slider.</param>
      <param name="end">This is the high value of the slider.</param>
      <param name="direction">This is the slider direction, horizontal or vertical.</param>
      <param name="pageSize">This is the number of values to change when the slider is clicked.</param>
    </member>
    <member name="T:UnityEngine.UIElements.SliderInt.UxmlFactory">
      <summary>
        <para>Instantiates a SliderInt using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.SliderInt.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.SliderInt.UxmlTraits">
      <summary>
        <para>UxmlTraits for the SliderInt.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.SliderInt.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.SliderInt.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize SliderInt properties using values from the attribute bag.</para>
      </summary>
      <param name="ve">The object to initialize.</param>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The creation context; unused.</param>
    </member>
    <member name="T:UnityEngine.UIElements.StyleBackground">
      <summary>
        <para>Style value that can be either a Background or a StyleKeyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleBackground.keyword">
      <summary>
        <para>The style keyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleBackground.value">
      <summary>
        <para>The Background value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.StyleBackground.#ctor(UnityEngine.UIElements.Background)">
      <summary>
        <para>Creates from either a Background or a StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.UIElements.StyleBackground.#ctor(UnityEngine.Texture2D)">
      <summary>
        <para>Creates from either a Background or a StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.UIElements.StyleBackground.#ctor(UnityEngine.UIElements.StyleKeyword)">
      <summary>
        <para>Creates from either a Background or a StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="T:UnityEngine.UIElements.StyleColor">
      <summary>
        <para>Style value that can be either a Color or a StyleKeyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleColor.keyword">
      <summary>
        <para>The style keyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleColor.value">
      <summary>
        <para>The Color value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.StyleColor.#ctor(UnityEngine.Color)">
      <summary>
        <para>Creates from either a Color or StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.UIElements.StyleColor.#ctor(UnityEngine.UIElements.StyleKeyword)">
      <summary>
        <para>Creates from either a Color or StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="T:UnityEngine.UIElements.StyleCursor">
      <summary>
        <para>Style value that can be either a Cursor or a StyleKeyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleCursor.keyword">
      <summary>
        <para>The style keyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleCursor.value">
      <summary>
        <para>The Cursor value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.StyleCursor.#ctor(UnityEngine.UIElements.Cursor)">
      <summary>
        <para>Creates from either a Cursor or StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.UIElements.StyleCursor.#ctor(UnityEngine.UIElements.StyleKeyword)">
      <summary>
        <para>Creates from either a Cursor or StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="T:UnityEngine.UIElements.StyleEnum`1">
      <summary>
        <para>Style value that can be either an enum or a StyleKeyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleEnum_1.keyword">
      <summary>
        <para>The style keyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleEnum_1.value">
      <summary>
        <para>The style value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.StyleEnum_1.#ctor(T)">
      <summary>
        <para>Creates from either an enum or a StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.UIElements.StyleEnum_1.#ctor(UnityEngine.UIElements.StyleKeyword)">
      <summary>
        <para>Creates from either an enum or a StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="T:UnityEngine.UIElements.StyleFloat">
      <summary>
        <para>Style value that can be either a float or a StyleKeyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleFloat.keyword">
      <summary>
        <para>The style keyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleFloat.value">
      <summary>
        <para>The float value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.StyleFloat.#ctor(System.Single)">
      <summary>
        <para>Creates from either a float or a StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.UIElements.StyleFloat.#ctor(UnityEngine.UIElements.StyleKeyword)">
      <summary>
        <para>Creates from either a float or a StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="T:UnityEngine.UIElements.StyleFont">
      <summary>
        <para>Style value that can be either a Font or a StyleKeyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleFont.keyword">
      <summary>
        <para>The style keyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleFont.value">
      <summary>
        <para>The Font value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.StyleFont.#ctor(UnityEngine.Font)">
      <summary>
        <para>Creates from a Font or StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.UIElements.StyleFont.#ctor(UnityEngine.UIElements.StyleKeyword)">
      <summary>
        <para>Creates from a Font or StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="T:UnityEngine.UIElements.StyleInt">
      <summary>
        <para>Style value that can be either an integer or a StyleKeyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleInt.keyword">
      <summary>
        <para>The style keyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleInt.value">
      <summary>
        <para>The integer value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.StyleInt.#ctor(System.Int32)">
      <summary>
        <para>Creates from either an integer or StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.UIElements.StyleInt.#ctor(UnityEngine.UIElements.StyleKeyword)">
      <summary>
        <para>Creates from either an integer or StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="T:UnityEngine.UIElements.StyleKeyword">
      <summary>
        <para>Keyword that can be used on any style value types.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.StyleKeyword.Auto">
      <summary>
        <para>For style properties accepting auto.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.StyleKeyword.Initial">
      <summary>
        <para>The initial (or default) value of a style property.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.StyleKeyword.None">
      <summary>
        <para>For style properties accepting none.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.StyleKeyword.Null">
      <summary>
        <para>Means that an inline style from IStyle has no value or keyword.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.StyleKeyword.Undefined">
      <summary>
        <para>Means that there's no keyword defined for that property.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.StyleLength">
      <summary>
        <para>Style value that can be either a Length or a StyleKeyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleLength.keyword">
      <summary>
        <para>The style keyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.StyleLength.value">
      <summary>
        <para>The Length value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.StyleLength.#ctor(System.Single)">
      <summary>
        <para>Creates from either a Length or a StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.UIElements.StyleLength.#ctor(UnityEngine.UIElements.Length)">
      <summary>
        <para>Creates from either a Length or a StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.UIElements.StyleLength.#ctor(UnityEngine.UIElements.StyleKeyword)">
      <summary>
        <para>Creates from either a Length or a StyleKeyword.</para>
      </summary>
      <param name="v"></param>
      <param name="keyword"></param>
    </member>
    <member name="T:UnityEngine.UIElements.TemplateContainer">
      <summary>
        <para>Template Container.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.TemplateContainer.UxmlFactory">
      <summary>
        <para>Instantiates and clones a TemplateContainer using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TemplateContainer.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.TemplateContainer.UxmlTraits">
      <summary>
        <para>UxmlTraits for the TemplateContainer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TemplateContainer.UxmlTraits.uxmlChildElementsDescription">
      <summary>
        <para>Returns an empty enumerable, as template instance do not have children.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TemplateContainer.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TemplateContainer.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize TemplateContainer properties using values from the attribute bag.</para>
      </summary>
      <param name="ve">The object to initialize.</param>
      <param name="bag">The attribute bag.</param>
      <param name="cc">The creation context; unused.</param>
    </member>
    <member name="T:UnityEngine.UIElements.TextElement">
      <summary>
        <para>Abstract base class for VisualElement containing text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextElement.text">
      <summary>
        <para>The text associated with the element.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.TextElement.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TextElement.MeasureTextSize(System.String,System.Single,UnityEngine.UIElements.VisualElement/MeasureMode,System.Single,UnityEngine.UIElements.VisualElement/MeasureMode)">
      <summary>
        <para>Computes the size needed to display a text string based on element style values such as font, font-size, word-wrap, and so on.</para>
      </summary>
      <param name="textToMeasure">The text to measure.</param>
      <param name="width">Suggested width. Can be zero.</param>
      <param name="widthMode">Width restrictions.</param>
      <param name="height">Suggested height.</param>
      <param name="heightMode">Height restrictions.</param>
      <returns>
        <para>Returns the horizontal and vertical size needed to display the text string.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.TextElement.UxmlFactory">
      <summary>
        <para>Instantiates a TextElement using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TextElement.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.TextElement.UxmlTraits">
      <summary>
        <para>UxmlTraits for the TextElement.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextElement.UxmlTraits.uxmlChildElementsDescription">
      <summary>
        <para>Enumerator to get the child elements of the UxmlTraits of TextElement.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TextElement.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TextElement.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initializer for the UxmlTraits for the TextElement.</para>
      </summary>
      <param name="ve">VisualElement to initialize.</param>
      <param name="bag">Bag of attributes where to get the value from.</param>
      <param name="cc">Creation Context, not used.</param>
    </member>
    <member name="T:UnityEngine.UIElements.TextField">
      <summary>
        <para>A textfield is a rectangular area where the user can edit a string.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.TextField.inputUssClassName">
      <summary>
        <para>USS class name of input elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.TextField.labelUssClassName">
      <summary>
        <para>USS class name of labels in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextField.multiline">
      <summary>
        <para>Set this to true to allow multiple lines in the textfield and false if otherwise.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.TextField.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextField.value">
      <summary>
        <para>The string currently being exposed by the field.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TextField.#ctor">
      <summary>
        <para>Creates a new textfield.</para>
      </summary>
      <param name="maxLength">The maximum number of characters this textfield can hold. If 0, there is no limit.</param>
      <param name="multiline">Set this to true to allow multiple lines in the textfield and false if otherwise.</param>
      <param name="isPasswordField">Set this to true to mask the characters and false if otherwise.</param>
      <param name="maskChar">The character used for masking in a password field.</param>
    </member>
    <member name="M:UnityEngine.UIElements.TextField.#ctor(System.Int32,System.Boolean,System.Boolean,System.Char)">
      <summary>
        <para>Creates a new textfield.</para>
      </summary>
      <param name="maxLength">The maximum number of characters this textfield can hold. If 0, there is no limit.</param>
      <param name="multiline">Set this to true to allow multiple lines in the textfield and false if otherwise.</param>
      <param name="isPasswordField">Set this to true to mask the characters and false if otherwise.</param>
      <param name="maskChar">The character used for masking in a password field.</param>
    </member>
    <member name="M:UnityEngine.UIElements.TextField.SelectRange(System.Int32,System.Int32)">
      <summary>
        <para>Selects text in the textfield between cursorIndex and selectionIndex.</para>
      </summary>
      <param name="cursorIndex">The caret and selection start position.</param>
      <param name="selectionIndex">The selection end position.</param>
      <param name="rangeCursorIndex"></param>
    </member>
    <member name="T:UnityEngine.UIElements.TextField.UxmlFactory">
      <summary>
        <para>Instantiates a TextField using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TextField.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.TextField.UxmlTraits">
      <summary>
        <para>UxmlTraits for the TextField.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TextField.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TextField.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize TextField properties using values from the attribute bag.</para>
      </summary>
      <param name="ve">The object to initialize.</param>
      <param name="bag">The attribute bag.</param>
      <param name="cc">The creation context; unused.</param>
    </member>
    <member name="T:UnityEngine.UIElements.TextInputBaseField`1">
      <summary>
        <para>Abstract base class used for all text-based fields.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.cursorColor">
      <summary>
        <para>Color of the cursor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.cursorIndex">
      <summary>
        <para>The current cursor position index in the text input field.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.doubleClickSelectsWord">
      <summary>
        <para>Controls whether double clicking selects the word under the mouse pointer or not.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.TextInputBaseField_1.inputUssClassName">
      <summary>
        <para>USS class name of input elements in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.isDelayed">
      <summary>
        <para>If set to true, the value property is not updated until either the user presses Enter or the text field loses focus.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.isPasswordField">
      <summary>
        <para>Returns true if the field is used to edit a password.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.isReadOnly">
      <summary>
        <para>Returns true if the field is read only.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.TextInputBaseField_1.labelUssClassName">
      <summary>
        <para>USS class name of labels in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.maskChar">
      <summary>
        <para>The character used for masking in a password field.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.maxLength">
      <summary>
        <para>Maximum number of characters for the field.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.selectIndex">
      <summary>
        <para>The current selection position index in the text input field.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.selectionColor">
      <summary>
        <para>Background color of selected text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.textInputBase">
      <summary>
        <para>This is the text input visual element which presents the value in the field.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.TextInputBaseField_1.textInputUssName">
      <summary>
        <para>USS class name of input elements in elements of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.tripleClickSelectsLine">
      <summary>
        <para>Controls whether triple clicking selects the entire line under the mouse pointer or not.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.TextInputBaseField_1.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TextInputBaseField_1.SelectAll">
      <summary>
        <para>Selects all the text.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.TextInputBaseField`1.TextInputBase">
      <summary>
        <para>This is the input text base class visual representation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.cursorColor">
      <summary>
        <para>Color of the cursor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.cursorIndex">
      <summary>
        <para>This is the cursor index in the text presented.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.doubleClickSelectsWord">
      <summary>
        <para>Indicates if a double click selects or not a word.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.isPasswordField">
      <summary>
        <para>Returns true if the field is used to edit a password.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.isReadOnly">
      <summary>
        <para>Returns true if the field is read only.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.maskChar">
      <summary>
        <para>The character used for masking in a password field.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.maxLength">
      <summary>
        <para>Maximum number of characters for the field.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.selectIndex">
      <summary>
        <para>This is the selection index in the text presented.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.selectionColor">
      <summary>
        <para>Background color of selected text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.tripleClickSelectsLine">
      <summary>
        <para>Indicates if a double click selects or not a line.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent)">
      <summary>
        <para>Called to construct a menu to show different options.</para>
      </summary>
      <param name="evt"></param>
    </member>
    <member name="M:UnityEngine.UIElements.TextInputBaseField_1.TextInputBase.SelectAll">
      <summary>
        <para>Selects all the text contained in the field.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.TextInputBaseField`1.UxmlTraits">
      <summary>
        <para>UxmlTraits for TextInputFieldBase.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TextInputBaseField_1.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize the traits for this field.</para>
      </summary>
      <param name="ve">VisualElement to which to apply the attributes.</param>
      <param name="bag">Bag of attributes where to get the attributes.</param>
      <param name="cc">Creation context.</param>
    </member>
    <member name="T:UnityEngine.UIElements.TimerState">
      <summary>
        <para>Contains timing information of scheduler events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TimerState.deltaTime">
      <summary>
        <para>Time difference in milliseconds between now and the previous callback.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TimerState.now">
      <summary>
        <para>Current time in milliseconds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TimerState.start">
      <summary>
        <para>Start time in milliseconds, or last callback time for repeatable IScheduledItem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TimerState.Equals(System.Object)">
      <summary>
        <para>Compare this object with another object and return true if they are equal.</para>
      </summary>
      <param name="obj">The object to compare with.</param>
      <param name="other">The object to compare with.</param>
      <returns>
        <para>True if the objects are equal.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.TimerState.Equals(UnityEngine.UIElements.TimerState)">
      <summary>
        <para>Compare this object with another object and return true if they are equal.</para>
      </summary>
      <param name="obj">The object to compare with.</param>
      <param name="other">The object to compare with.</param>
      <returns>
        <para>True if the objects are equal.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.UIElements.TimerState.op_Equal(UnityEngine.UIElements.TimerState,UnityEngine.UIElements.TimerState)">
      <summary>
        <para>Compare two TimerState objects and return true if they are equal.</para>
      </summary>
      <param name="state1">The first object.</param>
      <param name="state2">The second object.</param>
    </member>
    <member name="?:UnityEngine.UIElements.TimerState.op_NotEqual(UnityEngine.UIElements.TimerState,UnityEngine.UIElements.TimerState)">
      <summary>
        <para>Compare two TimerState objects and return true if they are not equal.</para>
      </summary>
      <param name="state1">The first object.</param>
      <param name="state2">The second object.</param>
    </member>
    <member name="T:UnityEngine.UIElements.Toggle">
      <summary>
        <para>This is the Toggle field.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Toggle.checkmarkUssClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Toggle.inputUssClassName">
      <summary>
        <para>USS class name of input elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Toggle.labelUssClassName">
      <summary>
        <para>USS class name of labels in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Toggle.noTextVariantUssClassName">
      <summary>
        <para>USS class name of elements of this type, when there is no text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.Toggle.text">
      <summary>
        <para>Optional text after the toggle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Toggle.textUssClassName">
      <summary>
        <para>USS class name of text elements in elements of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Toggle.ussClassName">
      <summary>
        <para>USS class name of elements of this type.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Toggle.UxmlFactory">
      <summary>
        <para>Instantiates a Toggle using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Toggle.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Toggle.UxmlTraits">
      <summary>
        <para>UxmlTraits for the Toggle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Toggle.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.Toggle.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize Toggle properties using values from the attribute bag.</para>
      </summary>
      <param name="ve">The object to initialize.</param>
      <param name="bag">The attribute bag.</param>
      <param name="cc">The creation context; unused.</param>
    </member>
    <member name="T:UnityEngine.UIElements.TooltipEvent">
      <summary>
        <para>Event sent to find the first element that displays a tooltip.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TooltipEvent.rect">
      <summary>
        <para>Rectangle of the hovered element in the panel coordinate system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TooltipEvent.tooltip">
      <summary>
        <para>Text to display inside the tooltip box.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TooltipEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.TrickleDown">
      <summary>
        <para>Use this enum to specify during which phases the event handler is executed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.TrickleDown.NoTrickleDown">
      <summary>
        <para>The event handler should be executed during the AtTarget and BubbleUp phases.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.TrickleDown.TrickleDown">
      <summary>
        <para>The event handler should be executed during the TrickleDown and AtTarget phases.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.TypedUxmlAttributeDescription`1">
      <summary>
        <para>Base class for all the uxml specific attributes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TypedUxmlAttributeDescription_1.defaultValue">
      <summary>
        <para>The default value to be used for that specific attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.TypedUxmlAttributeDescription_1.defaultValueAsString">
      <summary>
        <para>The string representation of the default value of the uxml attribute.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.TypedUxmlAttributeDescription_1.GetValueFromBag">
      <summary>
        <para>Use this method to obtain the actual value of the attribute.</para>
      </summary>
      <param name="bag">The bag of attributes where to get the actual value.</param>
      <param name="cc">The creation context.</param>
      <returns>
        <para>The value of type T.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.TypedUxmlAttributeDescription_1.GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Use this method to obtain the actual value of the attribute.</para>
      </summary>
      <param name="bag">The bag of attributes where to get the actual value.</param>
      <param name="cc">The creation context.</param>
      <returns>
        <para>The value of type T.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UQuery">
      <summary>
        <para>UQuery is a set of extension methods allowing you to select individual or collection of visualElements inside a complex hierarchy.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.UQueryBuilder`1">
      <summary>
        <para>Utility Object that contructs a set of selection rules to be ran on a root visual element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Active">
      <summary>
        <para>Selects all elements that are active.</para>
      </summary>
      <returns>
        <para>A QueryBuilder with the selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.AtIndex(System.Int32)">
      <summary>
        <para>Convenience overload, shorthand for Build().AtIndex().</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Build">
      <summary>
        <para>Compiles the selection rules into a QueryState object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Checked">
      <summary>
        <para>Selects all elements that are checked.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Children(System.String,System.String[])">
      <summary>
        <para>Selects all direct child elements of elements matching the previous rules.</para>
      </summary>
      <param name="name"></param>
      <param name="classes"></param>
      <param name="className"></param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Children(System.String,System.String)">
      <summary>
        <para>Selects all direct child elements of elements matching the previous rules.</para>
      </summary>
      <param name="name"></param>
      <param name="classes"></param>
      <param name="className"></param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Class(System.String)">
      <summary>
        <para>Selects all elements with the given class. Not to be confused with Type (see OfType&lt;&gt;()).</para>
      </summary>
      <param name="classname"></param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.#ctor(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Initializes a QueryBuilder.</para>
      </summary>
      <param name="visualElement">The root element on which to condfuct the search query.</param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Descendents(System.String,System.String[])">
      <summary>
        <para>Selects all elements that are descendants of currently matching ancestors.</para>
      </summary>
      <param name="name"></param>
      <param name="classNames"></param>
      <param name="classname"></param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Descendents(System.String,System.String)">
      <summary>
        <para>Selects all elements that are descendants of currently matching ancestors.</para>
      </summary>
      <param name="name"></param>
      <param name="classNames"></param>
      <param name="classname"></param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Enabled">
      <summary>
        <para>Selects all elements that are enabled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.First">
      <summary>
        <para>Convenience overload, shorthand for Build().First().</para>
      </summary>
      <returns>
        <para>The first element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Focused">
      <summary>
        <para>Selects all elements that are enabled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.ForEach(System.Action`1&lt;T&gt;)">
      <summary>
        <para>Convenience overload, shorthand for Build().ForEach().</para>
      </summary>
      <param name="funcCall">The function to be invoked with each matching element.</param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.ForEach(System.Collections.Generic.List`1&lt;T2&gt;,System.Func`2&lt;T,T2&gt;)">
      <summary>
        <para>Convenience overload, shorthand for Build().ForEach().</para>
      </summary>
      <param name="funcCall">The function to be invoked with each matching element.</param>
      <param name="result">Each return value will be added to this list.</param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.ForEach(System.Func`2&lt;T,T2&gt;)">
      <summary>
        <para>Convenience overload, shorthand for Build().ForEach().</para>
      </summary>
      <param name="funcCall">The function to be invoked with each matching element.</param>
      <returns>
        <para>Returns a list of all the results of the function calls.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Hovered">
      <summary>
        <para>Selects all elements that are hovered.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Last">
      <summary>
        <para>Convenience overload, shorthand for Build().Last().</para>
      </summary>
      <returns>
        <para>The last element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Name(System.String)">
      <summary>
        <para>Selects element with this name.</para>
      </summary>
      <param name="id"></param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.NotActive">
      <summary>
        <para>Selects all elements that are not active.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.NotChecked">
      <summary>
        <para>Selects all elements that npot checked.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.NotEnabled">
      <summary>
        <para>Selects all elements that are not enabled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.NotFocused">
      <summary>
        <para>Selects all elements that don't currently own the focus.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.NotHovered">
      <summary>
        <para>Selects all elements that are not hovered.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.NotSelected">
      <summary>
        <para>Selects all elements that are not selected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.NotVisible">
      <summary>
        <para>Selects all elements that are not visible.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.OfType(System.String,System.String[])">
      <summary>
        <para>Selects all elements of the specified Type (eg: Label, Button, ScrollView, etc).</para>
      </summary>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.OfType(System.String,System.String)">
      <summary>
        <para>Selects all elements of the specified Type (eg: Label, Button, ScrollView, etc).</para>
      </summary>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.UIElements.UQueryBuilder_1.op_Equal">
      <summary>
        <para>Compare two QueryBuilder objects and return true if they are equal.</para>
      </summary>
      <param name="builder1">The first object.</param>
      <param name="builder2">The second object.</param>
    </member>
    <member name="?:UnityEngine.UIElements.UQueryBuilder_1.op_NotEqual">
      <summary>
        <para>Compare two QueryBuilder objects and return true if they are not equal.</para>
      </summary>
      <param name="builder1">The first object.</param>
      <param name="builder2">The second object.</param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Selected">
      <summary>
        <para>Selects all elements that are selected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.ToList">
      <summary>
        <para>Convenience method. shorthand for Build().ToList.</para>
      </summary>
      <returns>
        <para>Returns a list containing elements satisfying selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.ToList(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Convenience method. Shorthand gor Build().ToList().</para>
      </summary>
      <param name="results">Adds all elements satisfying selection rules to the list.</param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Visible">
      <summary>
        <para>Selects all elements that are visible.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryBuilder_1.Where(System.Func`2&lt;T,System.Boolean&gt;)">
      <summary>
        <para>Selects all elements satifying the predicate.</para>
      </summary>
      <param name="selectorPredicate">Predicate that must return true for selected elements.</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UQueryExtensions">
      <summary>
        <para>UQuery is a set of extension methods allowing you to select individual or collection of visualElements inside a complex hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryExtensions.Q(UnityEngine.UIElements.VisualElement,System.String,System.String)">
      <summary>
        <para>Convenience overload, shorthand for Query&lt;T&gt;.Build().First().</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>The first element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryExtensions.Q(UnityEngine.UIElements.VisualElement,System.String,System.String[])">
      <summary>
        <para>Convenience overload, shorthand for Query&lt;T&gt;.Build().First().</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>The first element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryExtensions.Query(UnityEngine.UIElements.VisualElement,System.String,System.String)">
      <summary>
        <para>Initializes a QueryBuilder with the specified selection rules.</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryExtensions.Query(UnityEngine.UIElements.VisualElement,System.String,System.String[])">
      <summary>
        <para>Initializes a QueryBuilder with the specified selection rules.</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryExtensions.Query(UnityEngine.UIElements.VisualElement,System.String,System.String[])">
      <summary>
        <para>Initializes a QueryBuilder with the specified selection rules. Template parameter specifies the type of elements the selector applies to (ie: Label, Button, etc).</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryExtensions.Query(UnityEngine.UIElements.VisualElement,System.String,System.String)">
      <summary>
        <para>Initializes a QueryBuilder with the specified selection rules. Template parameter specifies the type of elements the selector applies to (ie: Label, Button, etc).</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryExtensions.Query(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Initializes an empty QueryBuilder on a specified root element.</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <returns>
        <para>An empty QueryBuilder on a specified root element.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UQueryState`1">
      <summary>
        <para>Query object containing all the selection rules. Can be saved and rerun later without re-allocating memory.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryState_1.AtIndex(System.Int32)">
      <summary>
        <para>Selects the n th element matching all the criteria, or null if not enough elements were found.</para>
      </summary>
      <param name="index">The index of the matched element.</param>
      <returns>
        <para>The match element at the specified index.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryState_1.First">
      <summary>
        <para>The first element matching all the criteria, or null if none was found.</para>
      </summary>
      <returns>
        <para>The first element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryState_1.ForEach(System.Action`1&lt;T&gt;)">
      <summary>
        <para>Invokes function on all elements matching the query.</para>
      </summary>
      <param name="funcCall">The action to be invoked with each matching element.</param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryState_1.ForEach(System.Collections.Generic.List`1&lt;T2&gt;,System.Func`2&lt;T,T2&gt;)">
      <summary>
        <para>Invokes function on all elements matching the query.</para>
      </summary>
      <param name="result">Each return value will be added to this list.</param>
      <param name="funcCall">The function to be invoked with each matching element.</param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryState_1.ForEach(System.Func`2&lt;T,T2&gt;)">
      <summary>
        <para>Invokes function on all elements matching the query. Overloaded for convenience.</para>
      </summary>
      <param name="funcCall">The function to be invoked with each matching element.</param>
      <returns>
        <para>Returns a list of all the results of the function calls.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryState_1.Last">
      <summary>
        <para>The last element matching all the criteria, or null if none was found.</para>
      </summary>
      <returns>
        <para>The last element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.UIElements.UQueryState_1.op_Equal">
      <summary>
        <para>Compare two QueryState objects and return true if they are equal.</para>
      </summary>
      <param name="state1">The first object.</param>
      <param name="state2">The second object.</param>
    </member>
    <member name="?:UnityEngine.UIElements.UQueryState_1.op_NotEqual">
      <summary>
        <para>Compare two QueryState objects and return true if they are not equal.</para>
      </summary>
      <param name="state1">The first object.</param>
      <param name="state2">The second object.</param>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryState_1.RebuildOn(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Creates a new QueryState with the same selection rules, applied on another VisualElement.</para>
      </summary>
      <param name="element">The element on which to apply the selection rules.</param>
      <returns>
        <para>A new QueryState with the same selection rules, applied on this element.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryState_1.ToList">
      <summary>
        <para>Returns a list containing elements satisfying selection rules.</para>
      </summary>
      <returns>
        <para>Returns a list containing elements satisfying selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UQueryState_1.ToList(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Adds all elements satisfying selection rules to the list.</para>
      </summary>
      <param name="results">Adds all elements satisfying selection rules to the list.</param>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlAttributeDescription">
      <summary>
        <para>Base class for describing an XML attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlAttributeDescription.defaultValueAsString">
      <summary>
        <para>The default value for the attribute, as a string.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlAttributeDescription.name">
      <summary>
        <para>The attribute name.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlAttributeDescription.obsoleteNames">
      <summary>
        <para>A list of obsolete names for this attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlAttributeDescription.restriction">
      <summary>
        <para>Restrictions on the possible values of the attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlAttributeDescription.type">
      <summary>
        <para>Attribute type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlAttributeDescription.typeNamespace">
      <summary>
        <para>Attribute namespace.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlAttributeDescription.use">
      <summary>
        <para>Whether the attribute is optional, required or prohibited.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlAttributeDescription.GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext,System.Func`3&lt;System.String,T,T&gt;,T)">
      <summary>
        <para>Get the attribute value from the attribute bag.</para>
      </summary>
      <param name="bag">A bag containg attributes and their values as strings.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <param name="converterFunc">A function to convert a string value to type T.</param>
      <param name="defaultValue">The value to return if the attribute is not found in the bag.</param>
      <returns>
        <para>The attribute value from the bag, or defaultValue if the attribute is not found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlAttributeDescription.TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext,System.Func`3&lt;System.String,T,T&gt;,T,T&amp;)">
      <summary>
        <para>Tries to get the attribute value from the attribute bag.</para>
      </summary>
      <param name="bag">A bag containg attributes and their values as strings.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <param name="converterFunc">A function to convert a string value to type T.</param>
      <param name="defaultValue">The value to return if the attribute is not found in the bag.</param>
      <param name="value">If the attribute could be retrieved, the retrieved value converted by the conversion function or the default value if the retrieved value could not de converted.</param>
      <returns>
        <para>True if the value could be retrieved, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlAttributeDescription.Use">
      <summary>
        <para>An enum to describe attribute use.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.UxmlAttributeDescription.Use.None">
      <summary>
        <para>There is no restriction on the use of this attribute with the element.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.UxmlAttributeDescription.Use.Optional">
      <summary>
        <para>The attribute is optional for the element.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.UxmlAttributeDescription.Use.Prohibited">
      <summary>
        <para>The attribute should not appear for the element.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.UxmlAttributeDescription.Use.Required">
      <summary>
        <para>The attribute must appear in the element tag.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlBoolAttributeDescription">
      <summary>
        <para>Describes a XML bool attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlBoolAttributeDescription.defaultValueAsString">
      <summary>
        <para>The default value for the attribute, as a string.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlBoolAttributeDescription.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlBoolAttributeDescription.GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Retrieves the value of this attribute from the attribute bag. Returns it if it is found, otherwise return defaultValue.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <returns>
        <para>The value of the attribute.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlBoolAttributeDescription.TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext,System.Boolean&amp;)">
      <summary>
        <para>Tries to retrieve the value of this attribute from the attribute bag. Returns true if it is found, otherwise returns false.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <param name="value">The value of the attribute.</param>
      <returns>
        <para>True if the value could be retrieved, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlChildElementDescription">
      <summary>
        <para>Describe an allowed child element for an element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlChildElementDescription.elementName">
      <summary>
        <para>The name of the allowed child element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlChildElementDescription.elementNamespace">
      <summary>
        <para>The namespace name of the allowed child element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlChildElementDescription.#ctor(System.Type)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="t"></param>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlColorAttributeDescription">
      <summary>
        <para>Describes a XML attribute representing a Color as a string.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlColorAttributeDescription.defaultValueAsString">
      <summary>
        <para>The default value for the attribute, as a string.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlColorAttributeDescription.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlColorAttributeDescription.GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Retrieves the value of this attribute from the attribute bag. Returns it if it is found, otherwise return defaultValue.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <returns>
        <para>The value of the attribute.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlColorAttributeDescription.TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext,UnityEngine.Color&amp;)">
      <summary>
        <para>Tries to retrieve the value of this attribute from the attribute bag. Returns true if it is found, otherwise returns false.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <param name="value">The value of the attribute.</param>
      <returns>
        <para>True if the value could be retrieved, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlDoubleAttributeDescription">
      <summary>
        <para>Describes a XML double attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlDoubleAttributeDescription.defaultValueAsString">
      <summary>
        <para>The default value for the attribute, as a string.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlDoubleAttributeDescription.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlDoubleAttributeDescription.GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Retrieves the value of this attribute from the attribute bag. Returns it if it is found, otherwise return defaultValue.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <returns>
        <para>The value of the attribute.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlDoubleAttributeDescription.TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext,System.Double&amp;)">
      <summary>
        <para>Tries to retrieve the value of this attribute from the attribute bag. Returns true if it is found, otherwise returns false.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <param name="value">The value of the attribute.</param>
      <returns>
        <para>True if the value could be retrieved, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlEnumAttributeDescription`1">
      <summary>
        <para>Describes a XML attribute representing an enum as a string.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlEnumAttributeDescription_1.defaultValueAsString">
      <summary>
        <para>The default value for the attribute, as a string.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlEnumAttributeDescription_1.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlEnumAttributeDescription_1.GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Retrieves the value of this attribute from the attribute bag. Returns it if it is found, otherwise return defaultValue.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <returns>
        <para>The value of the attribute.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlEnumAttributeDescription_1.TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext,T&amp;)">
      <summary>
        <para>Tries to retrieve the value of this attribute from the attribute bag. Returns true if it is found, otherwise returns false.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <param name="value">The value of the attribute.</param>
      <returns>
        <para>True if the value could be retrieved, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlEnumeration">
      <summary>
        <para>Restricts the value of an attribute to be taken from a list of values.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlEnumeration.values">
      <summary>
        <para>The list of values the attribute can take.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlEnumeration.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlEnumeration.Equals(UnityEngine.UIElements.UxmlTypeRestriction)">
      <summary>
        <para>Indicates whether the current UxmlEnumeration object is equal to another object of the same type.</para>
      </summary>
      <param name="other">The object to compare with.</param>
      <returns>
        <para>True if the otheer object is equal to this one.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlEnumeration.Equals">
      <summary>
        <para>Indicates whether the current UxmlEnumeration object is equal to another object of the same type.</para>
      </summary>
      <param name="other">The object to compare with.</param>
      <returns>
        <para>True if the otheer object is equal to this one.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlFactory`1">
      <summary>
        <para>UxmlFactory specialization for classes that derive from VisualElement and that shares its traits, VisualElementTraits.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlFactory_1.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlFactory`2">
      <summary>
        <para>Generic base class for UXML factories, which instantiate a VisualElement using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlFactory_2.canHaveAnyAttribute">
      <summary>
        <para>Returns UxmlTraits.canHaveAnyAttribute (where UxmlTraits is the argument for T1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlFactory_2.substituteForTypeName">
      <summary>
        <para>Returns an empty string if T0 is not VisualElement; otherwise, returns "VisualElement".</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlFactory_2.substituteForTypeNamespace">
      <summary>
        <para>Returns the namespace for substituteForTypeName.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlFactory_2.substituteForTypeQualifiedName">
      <summary>
        <para>Returns the fully qualified name for substituteForTypeName.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlFactory_2.uxmlAttributesDescription">
      <summary>
        <para>Returns an empty enumerable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlFactory_2.uxmlChildElementsDescription">
      <summary>
        <para>Returns an empty enumerable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlFactory_2.uxmlName">
      <summary>
        <para>Returns the type name of T0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlFactory_2.uxmlNamespace">
      <summary>
        <para>Returns the namespace name of T0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlFactory_2.uxmlQualifiedName">
      <summary>
        <para>Returns the typefully qualified name of T0.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlFactory_2.AcceptsAttributeBag">
      <summary>
        <para>Returns true.</para>
      </summary>
      <param name="bag">The attribute bag.</param>
      <returns>
        <para>Always true.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlFactory_2.Create(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Instantiate an object of type T0 and initialize it by calling T1 UxmlTraits.Init method.</para>
      </summary>
      <param name="bag">A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.</param>
      <param name="cc">When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.</param>
      <returns>
        <para>The created element.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlFactory_2.DoCreate(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>If implemented by your factory, this function will be called to instantiate an object of type T0. Otherwise, the default constructor of T0 will be used.</para>
      </summary>
      <param name="bag">A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.</param>
      <param name="cc">When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.</param>
      <returns>
        <para>The created element.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlFloatAttributeDescription">
      <summary>
        <para>Describes a XML float attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlFloatAttributeDescription.defaultValueAsString">
      <summary>
        <para>The default value for the attribute, as a string.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlFloatAttributeDescription.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlFloatAttributeDescription.GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Retrieves the value of this attribute from the attribute bag. Returns it if it is found, otherwise return defaultValue.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <returns>
        <para>The value of the attribute.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlFloatAttributeDescription.TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext,System.Single&amp;)">
      <summary>
        <para>Tries to retrieve the value of this attribute from the attribute bag. Returns true if it is found, otherwise returns false.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <param name="value">The value of the attribute.</param>
      <returns>
        <para>True if the value could be retrieved, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlIntAttributeDescription">
      <summary>
        <para>Describes a XML int attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlIntAttributeDescription.defaultValueAsString">
      <summary>
        <para>The default value for the attribute, as a string.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlIntAttributeDescription.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlIntAttributeDescription.GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Retrieves the value of this attribute from the attribute bag. Returns it if it is found, otherwise return defaultValue.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <returns>
        <para>The value of the attribute.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlIntAttributeDescription.TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext,System.Int32&amp;)">
      <summary>
        <para>Tries to retrieve the value of this attribute from the attribute bag. Returns true if it is found, otherwise returns false.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <param name="value">The value of the attribute.</param>
      <returns>
        <para>True if the value could be retrieved, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlLongAttributeDescription">
      <summary>
        <para>Describes a XML long attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlLongAttributeDescription.defaultValueAsString">
      <summary>
        <para>The default value for the attribute, as a string.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlLongAttributeDescription.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlLongAttributeDescription.GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Retrieves the value of this attribute from the attribute bag. Returns it if it is found, otherwise return defaultValue.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <returns>
        <para>The value of the attribute.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlLongAttributeDescription.TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext,System.Int64&amp;)">
      <summary>
        <para>Tries to retrieve the value of this attribute from the attribute bag. Returns true if it is found, otherwise returns false.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <param name="value">The value of the attribute.</param>
      <returns>
        <para>True if the value could be retrieved, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlRootElementFactory">
      <summary>
        <para>Factory for the root UXML element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlRootElementFactory.substituteForTypeName">
      <summary>
        <para>Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlRootElementFactory.substituteForTypeNamespace">
      <summary>
        <para>Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlRootElementFactory.substituteForTypeQualifiedName">
      <summary>
        <para>Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlRootElementFactory.uxmlName">
      <summary>
        <para>Returns "UXML".</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlRootElementFactory.uxmlQualifiedName">
      <summary>
        <para>Returns the qualified name for this element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlRootElementFactory.Create(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Returns null.</para>
      </summary>
      <param name="bag"></param>
      <param name="cc"></param>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlRootElementFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlRootElementTraits">
      <summary>
        <para>UxmlTraits for the UXML root element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlRootElementTraits.uxmlChildElementsDescription">
      <summary>
        <para>Returns an enumerable containing UxmlChildElementDescription(typeof(VisualElement)), since the root element can contain VisualElements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlRootElementTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlStringAttributeDescription">
      <summary>
        <para>Describes a XML string attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlStringAttributeDescription.defaultValueAsString">
      <summary>
        <para>The default value for the attribute, as a string.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlStringAttributeDescription.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlStringAttributeDescription.GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Retrieves the value of this attribute from the attribute bag. Returns it if it is found, otherwise return defaultValue.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <returns>
        <para>The value of the attribute.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlStringAttributeDescription.TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext,System.String&amp;)">
      <summary>
        <para>Tries to retrieve the value of this attribute from the attribute bag. Returns true if it is found, otherwise returns false.</para>
      </summary>
      <param name="bag">The bag of attributes.</param>
      <param name="cc">The context in which the values are retrieved.</param>
      <param name="value">The value of the attribute.</param>
      <returns>
        <para>True if the value could be retrieved, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlTraits">
      <summary>
        <para>Describes a VisualElement derived class for the parsing of UXML files and the generation of UXML schema definition.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlTraits.canHaveAnyAttribute">
      <summary>
        <para>Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlTraits.uxmlAttributesDescription">
      <summary>
        <para>Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlTraits.uxmlChildElementsDescription">
      <summary>
        <para>Describes the types of element that can appear as children of this element in a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize a VisualElement instance with values from the UXML element attributes.</para>
      </summary>
      <param name="ve">The VisualElement to initialize.</param>
      <param name="bag">A bag of name-value pairs, one for each attribute of the UXML element.</param>
      <param name="cc">When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.</param>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlTypeRestriction">
      <summary>
        <para>Base class to restricts the value of an attribute.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlTypeRestriction.Equals(UnityEngine.UIElements.UxmlTypeRestriction)">
      <summary>
        <para>Indicates whether the current UxmlTypeRestriction object is equal to another object of the same type.</para>
      </summary>
      <param name="other">The object to compare with.</param>
      <returns>
        <para>True if the otheer object is equal to this one.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlValueBounds">
      <summary>
        <para>Restricts the value of an attribute to be within the specified bounds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlValueBounds.excludeMax">
      <summary>
        <para>True if the bounds exclude max.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlValueBounds.excludeMin">
      <summary>
        <para>True if the bounds exclude min.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlValueBounds.max">
      <summary>
        <para>The maximum value for the attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlValueBounds.min">
      <summary>
        <para>The minimum value for the attribute.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlValueBounds.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlValueBounds.Equals(UnityEngine.UIElements.UxmlTypeRestriction)">
      <summary>
        <para>Indicates whether the current UxmlValueBounds object is equal to another object of the same type.</para>
      </summary>
      <param name="other">The object to compare with.</param>
      <returns>
        <para>True if the otheer object is equal to this one.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.UxmlValueMatches">
      <summary>
        <para>Restricts the value of an attribute to match a regular expression.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.UxmlValueMatches.regex">
      <summary>
        <para>The regular expression that should be matched by the value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlValueMatches.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.UxmlValueMatches.Equals(UnityEngine.UIElements.UxmlTypeRestriction)">
      <summary>
        <para>Indicates whether the current UxmlValueMatches object is equal to another object of the same type.</para>
      </summary>
      <param name="other">The object to compare with.</param>
      <returns>
        <para>True if the otheer object is equal to this one.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UIElements.ValidateCommandEvent">
      <summary>
        <para>The event sent to probe which elements accepts a command.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.ValidateCommandEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Visibility">
      <summary>
        <para>Specifies whether or not an element is visible.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Visibility.Hidden">
      <summary>
        <para>The element is hidden. Hidden elements will take up space in their parent layout if their positionType is set to PositionType.Relative. Use the display property to both hide and remove an element from the parent VisualElement layout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Visibility.Visible">
      <summary>
        <para>The element is visible. Default Value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.VisualElement">
      <summary>
        <para>Base class for objects that are part of the UIElements visual tree.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.childCount">
      <summary>
        <para> Number of child elements in this object's contentContainer
                </para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.contentContainer">
      <summary>
        <para> child elements are added to this element, usually this
                </para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.customStyle">
      <summary>
        <para>Returns the custom style properties accessor for this element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.enabledInHierarchy">
      <summary>
        <para>Returns true if the VisualElement is enabled in its own hierarchy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.enabledSelf">
      <summary>
        <para>Returns true if the VisualElement is enabled locally.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.hierarchy">
      <summary>
        <para> Access to this element physical hierarchy
                </para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.pickingMode">
      <summary>
        <para>Determines if this element can be pick during mouseEvents or IPanel.Pick queries.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.resolvedStyle">
      <summary>
        <para>Returns the VisualElement resolved style values.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.schedule">
      <summary>
        <para>Retrieves this VisualElement's IVisualElementScheduler</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.style">
      <summary>
        <para>Reference to the style object of this element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.styleSheets">
      <summary>
        <para>Returns a VisualElementStyleSheetSet that manipulates style sheets attached to this element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.tooltip">
      <summary>
        <para>Text to display inside an information box after the user hovers the element for a small amount of time.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.userData">
      <summary>
        <para>This property can be used to associate application-specific user data with this VisualElement.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.viewDataKey">
      <summary>
        <para>Used for view data persistence (ie. tree expanded states, scroll position, zoom level).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Add(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Add an element to this element's contentContainer</para>
      </summary>
      <param name="child"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.BringToFront">
      <summary>
        <para>Brings this element to the end of its parent children list. The element will be visually in front of any overlapping sibling elements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Children">
      <summary>
        <para>Returns the elements from its contentContainer</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Clear">
      <summary>
        <para>Remove all child elements from this element's contentContainer</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Contains(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Returns true if the element is a direct child of this VisualElement</para>
      </summary>
      <param name="child"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.ElementAt(System.Int32)">
      <summary>
        <para>Retrieves the child element at position</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.EnableInClassList(System.String,System.Boolean)">
      <summary>
        <para>Enables or disables the class with the given name.</para>
      </summary>
      <param name="className">The name of the class to enable or disable.</param>
      <param name="enable">A boolean flag that adds or removes the class name from the class list. If true, EnableInClassList adds the class name to the class list. If false, EnableInClassList removes the class name from the class list.</param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.FindAncestorUserData">
      <summary>
        <para>Searchs up the hierachy of this VisualElement and retrieves stored userData, if any is found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.FindCommonAncestor(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Finds the lowest commont ancestor between two VisualElements inside the VisualTree hierarchy</para>
      </summary>
      <param name="other"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.GetFirstAncestorOfType">
      <summary>
        <para>Walks up the hierarchy, starting from this element's parent, and returns the first VisualElement of this type</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.GetFirstOfType">
      <summary>
        <para>Walks up the hierarchy, starting from this element, and returns the first VisualElement of this type</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.VisualElement.Hierarchy">
      <summary>
        <para>Hierarchy is a struct allowing access to the hierarchy of visual elements</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.Hierarchy.childCount">
      <summary>
        <para> Number of child elements in this object's contentContainer
                </para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.Hierarchy.parent">
      <summary>
        <para> Access the physical parent of this element in the hierarchy
                </para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Hierarchy.Add(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Add an element to this element's contentContainer</para>
      </summary>
      <param name="child"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Hierarchy.Children">
      <summary>
        <para>Returns the elements from its contentContainer</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Hierarchy.Clear">
      <summary>
        <para>Remove all child elements from this element's contentContainer</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Hierarchy.ElementAt(System.Int32)">
      <summary>
        <para>Retrieves the child element at position</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Hierarchy.IndexOf(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Retrieves the index of the specified VisualElement in the Hierarchy.</para>
      </summary>
      <param name="element">The element to return the index for.</param>
      <returns>
        <para>Returns the index of the element, or -1 if the element is not found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Hierarchy.Insert">
      <summary>
        <para>Insert an element into this element's contentContainer</para>
      </summary>
    </member>
    <member name="?:UnityEngine.UIElements.VisualElement.Hierarchy.op_Equal(UnityEngine.UIElements.VisualElement/Hierarchy,UnityEngine.UIElements.VisualElement/Hierarchy)">
      <summary>
        <para>Compare two Hierarchy objects and return true if they are equal.</para>
      </summary>
      <param name="x">The first object.</param>
      <param name="y">The second object.</param>
    </member>
    <member name="?:UnityEngine.UIElements.VisualElement.Hierarchy.op_NotEqual(UnityEngine.UIElements.VisualElement/Hierarchy,UnityEngine.UIElements.VisualElement/Hierarchy)">
      <summary>
        <para>Compare two Hierarchy objects and return true if they are not equal.</para>
      </summary>
      <param name="x">The first object.</param>
      <param name="y">The second object.</param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Hierarchy.Remove(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Removes this child from the hierarchy</para>
      </summary>
      <param name="child"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Hierarchy.RemoveAt(System.Int32)">
      <summary>
        <para>Remove the child element located at this position from this element's contentContainer</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Hierarchy.Sort(System.Comparison`1&lt;UnityEngine.UIElements.VisualElement&gt;)">
      <summary>
        <para>Reorders child elements from this VisualElement contentContainer.</para>
      </summary>
      <param name="comp">Sorting criteria.</param>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.Hierarchy.this">
      <summary>
        <para> Access to this element physical hierarchy
                </para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.IndexOf(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Retrieves the child index of the specified VisualElement.</para>
      </summary>
      <param name="element">The child to return the index for.</param>
      <returns>
        <para>Returns the index of the child, or -1 if the child is not found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Insert">
      <summary>
        <para>Insert an element into this element's contentContainer</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.MarkDirtyRepaint">
      <summary>
        <para>Triggers a repaint of the VisualElement on the next frame.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.VisualElement.MeasureMode">
      <summary>
        <para>The modes available to measure VisualElement sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.VisualElement.MeasureMode.AtMost">
      <summary>
        <para>At Most. The element should give its preferred width/height but no more than the value passed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.VisualElement.MeasureMode.Exactly">
      <summary>
        <para>The element should give the width/height that is passed in and derive the opposite site from this value (for example, calculate text size from a fixed width).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.VisualElement.MeasureMode.Undefined">
      <summary>
        <para>The element should give its preferred width/height without any constraint.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.PlaceBehind(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Places this element right before the sibling element in their parent children list. If the element and the sibling position overlap, the element will be visually behind of its sibling.</para>
      </summary>
      <param name="sibling">The sibling element.</param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.PlaceInFront(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Places this element right after the sibling element in their parent children list. If the element and the sibling position overlap, the element will be visually in front of its sibling.</para>
      </summary>
      <param name="sibling">The sibling element.</param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Remove(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Removes this child from the hierarchy</para>
      </summary>
      <param name="element"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.RemoveAt(System.Int32)">
      <summary>
        <para>Remove the child element located at this position from this element's contentContainer</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.RemoveFromHierarchy">
      <summary>
        <para>Removes this element from its parent hierarchy</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.SendEvent(UnityEngine.UIElements.EventBase)">
      <summary>
        <para>Sends an event to the event handler.</para>
      </summary>
      <param name="e">The event to send.</param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.SendToBack">
      <summary>
        <para>Sends this element to the beginning of its parent children list. The element will be visually behind any overlapping sibling elements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.SetEnabled(System.Boolean)">
      <summary>
        <para>Changes the VisualElement enabled state. A disabled VisualElement does not receive most events.</para>
      </summary>
      <param name="value">New enabled state</param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.Sort(System.Comparison`1&lt;UnityEngine.UIElements.VisualElement&gt;)">
      <summary>
        <para>Reorders child elements from this VisualElement contentContainer.</para>
      </summary>
      <param name="comp">Sorting criteria.</param>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.this">
      <summary>
        <para> Access to this element physical hierarchy
                </para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.ToggleInClassList(System.String)">
      <summary>
        <para>Toggles between adding and removing the given class name from the class list.</para>
      </summary>
      <param name="className">The class name to add or remove from the class list.</param>
    </member>
    <member name="T:UnityEngine.UIElements.VisualElement.UxmlFactory">
      <summary>
        <para>Instantiates a VisualElement using the data read from a UXML file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.UxmlFactory.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.VisualElement.UxmlTraits">
      <summary>
        <para>UxmlTraits for the VisualElement.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.UxmlTraits.focusable">
      <summary>
        <para>The focusable attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.UxmlTraits.focusIndex">
      <summary>
        <para>The focus index attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElement.UxmlTraits.uxmlChildElementsDescription">
      <summary>
        <para>Returns an enumerable containing UxmlChildElementDescription(typeof(VisualElement)), since VisualElements can contain other VisualElements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.UxmlTraits.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElement.UxmlTraits.Init(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IUxmlAttributes,UnityEngine.UIElements.CreationContext)">
      <summary>
        <para>Initialize VisualElement properties using values from the attribute bag.</para>
      </summary>
      <param name="ve">The object to initialize.</param>
      <param name="bag">The attribute bag.</param>
      <param name="cc">The creation context; unused.</param>
    </member>
    <member name="T:UnityEngine.UIElements.VisualElementExtensions">
      <summary>
        <para>VisualElementExtensions is a set of extension methods useful for VisualElement.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElementExtensions.AddManipulator(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IManipulator)">
      <summary>
        <para>Add a manipulator associated to a VisualElement.</para>
      </summary>
      <param name="ele">VisualElement associated to the manipulator.</param>
      <param name="manipulator">Manipulator to be added to the VisualElement.</param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElementExtensions.RemoveManipulator(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.IManipulator)">
      <summary>
        <para>Remove a manipulator associated to a VisualElement.</para>
      </summary>
      <param name="ele">VisualElement associated to the manipulator.</param>
      <param name="manipulator">Manipulator to be removed from the VisualElement.</param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElementExtensions.StretchToParentWidth(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>The given VisualElement's left and right edges will be aligned with the corresponding edges of the parent element.</para>
      </summary>
      <param name="elem"></param>
    </member>
    <member name="T:UnityEngine.UIElements.VisualElementFocusChangeDirection">
      <summary>
        <para>Define focus change directions for the VisualElementFocusRing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElementFocusChangeDirection.lastValue">
      <summary>
        <para>Last value for the direction defined by this class.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElementFocusChangeDirection.left">
      <summary>
        <para>The focus is moving to the left.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElementFocusChangeDirection.right">
      <summary>
        <para>The focus is moving to the right.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.VisualElementFocusRing">
      <summary>
        <para>Implementation of a linear focus ring. Elements are sorted according to their focusIndex.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElementFocusRing.defaultFocusOrder">
      <summary>
        <para>The focus order for elements having 0 has a focusIndex.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElementFocusRing.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="root">The root of the element tree for which we want to build a focus ring.</param>
      <param name="dfo">Default ordering of the elements in the ring.</param>
    </member>
    <member name="T:UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder">
      <summary>
        <para>Ordering of elements in the focus ring.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder.ChildOrder">
      <summary>
        <para>Order elements using a depth-first pre-order traversal of the element tree.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder.PositionXY">
      <summary>
        <para>Order elements according to their position, first by X, then by Y.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder.PositionYX">
      <summary>
        <para>Order elements according to their position, first by Y, then by X.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElementFocusRing.GetFocusChangeDirection(UnityEngine.UIElements.Focusable,UnityEngine.UIElements.EventBase)">
      <summary>
        <para>Get the direction of the focus change for the given event. For example, when the Tab key is pressed, focus should be given to the element to the right in the focus ring.</para>
      </summary>
      <param name="currentFocusable"></param>
      <param name="e"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElementFocusRing.GetNextFocusable(UnityEngine.UIElements.Focusable,UnityEngine.UIElements.FocusChangeDirection)">
      <summary>
        <para>Get the next element in the given direction.</para>
      </summary>
      <param name="currentFocusable"></param>
      <param name="direction"></param>
    </member>
    <member name="T:UnityEngine.UIElements.VisualElementStyleSheetSet">
      <summary>
        <para>This structure manipulates the set of StyleSheet objects attached to the owner VisualElement.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElementStyleSheetSet.count">
      <summary>
        <para>Number of style sheets attached to the owner element.
                </para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElementStyleSheetSet.Add(UnityEngine.UIElements.StyleSheet)">
      <summary>
        <para>Adds a style sheet for the owner element.</para>
      </summary>
      <param name="styleSheet"></param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElementStyleSheetSet.Clear">
      <summary>
        <para>Removes all style sheets for the owner element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElementStyleSheetSet.Contains(UnityEngine.UIElements.StyleSheet)">
      <summary>
        <para>Looks for the specified StyleSheet</para>
      </summary>
      <param name="styleSheet"></param>
      <returns>
        <para>True if the style sheet is attached to the owner element, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.VisualElementStyleSheetSet.Remove">
      <summary>
        <para>Removes a style sheet for the owner element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.VisualElementStyleSheetSet.this">
      <summary>
        <para>Accesses a StyleSheet at the specified index.
                </para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.VisualTreeAsset">
      <summary>
        <para>Instances of this class hold a tree of `VisualElementAsset`s. It is created from an UXML file, and each `VisualElementAsset` represents a UXML node inside this file. A `VisualTreeAsset` can be Cloned to yield a tree of `VisualElement`s.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.VisualTreeAsset.CloneTree">
      <summary>
        <para>Build a tree of VisualElements from the asset.</para>
      </summary>
      <param name="bindingPath">Path of the target property to be bound to the cloned tree root.</param>
      <returns>
        <para>The root of the tree of VisualElements that was just cloned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.VisualTreeAsset.CloneTree(System.String)">
      <summary>
        <para>Build a tree of VisualElements from the asset.</para>
      </summary>
      <param name="bindingPath">Path of the target property to be bound to the cloned tree root.</param>
      <returns>
        <para>The root of the tree of VisualElements that was just cloned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.VisualTreeAsset.CloneTree(UnityEngine.UIElements.VisualElement)">
      <summary>
        <para>Build a tree of VisualElements from the asset.</para>
      </summary>
      <param name="target">A VisualElement that will act as the root of the cloned tree.</param>
    </member>
    <member name="M:UnityEngine.UIElements.VisualTreeAsset.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.WheelEvent">
      <summary>
        <para>Mouse wheel event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UIElements.WheelEvent.delta">
      <summary>
        <para>The amount of scrolling applied with the mouse wheel.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.WheelEvent.#ctor">
      <summary>
        <para>Constructor. Use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UIElements.WheelEvent.GetPooled(UnityEngine.Event)">
      <summary>
        <para>Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained from this method should be released back to the pool using Dispose().</para>
      </summary>
      <param name="systemEvent">A wheel IMGUI event.</param>
      <returns>
        <para>Returns an initialized event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.UIElements.WheelEvent.Init">
      <summary>
        <para>Resets the event members to their initial values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.WhiteSpace">
      <summary>
        <para>Word wrapping over multiple lines if not enough space is available to draw the text of an element.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.WhiteSpace.Normal">
      <summary>
        <para>Text will wrap when necessary.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.WhiteSpace.NoWrap">
      <summary>
        <para>Text will never wrap to the next line.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIElements.Wrap">
      <summary>
        <para>By default, items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Wrap.NoWrap">
      <summary>
        <para>All items will be on one line. Default Value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Wrap.Wrap">
      <summary>
        <para>Items will wrap onto multiple lines, from top to bottom.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIElements.Wrap.WrapReverse">
      <summary>
        <para>Items will wrap onto multiple lines from bottom to top.</para>
      </summary>
    </member>
    <member name="A:UnityEngine.UIElementsModule">
      <summary>
        <para>The UIElements module implements the UIElements retained mode UI framework.</para>
      </summary>
    </member>
  </members>
</doc>
